<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masamichi Ueta</title>
    <description>エンジニアリング・デザイン・日常</description>
    <link>https://masamichiueta.github.iohttps://masamichiueta.github.io/</link>
    <atom:link href="https://masamichiueta.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 18 Dec 2022 19:43:53 +0900</pubDate>
    <lastBuildDate>Sun, 18 Dec 2022 19:43:53 +0900</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>brew upgradeで Your CLT does not support macOS 11というエラーがでた</title>
        <description>&lt;p&gt;macOSをBig Surに更新してから、homebrewの更新をするとエラーが発生したのでメモ。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew update
$ brew upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行すると、&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Your CLT does not support macOS 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と表示されました。&lt;/p&gt;

&lt;p&gt;以下を実行すれば、更新できるようになりました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo rm -rf /Library/Developer/CommandLineTools
$ sudo xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 17 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2021/02/17/homebrew-macos11-error.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2021/02/17/homebrew-macos11-error.html</guid>
        
        <category>homebrew</category>
        
        <category>macOS Big Sur</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>テレビを見ない生活が続いたので、テレビを捨てました</title>
        <description>&lt;p&gt;テレビを見ない生活がけっこう長く続いた（1年ちょっとくらい？）ので、先日テレビを捨てました。Nintendo SwitchやApple TVのディスプレイとしてはたまに使っていたのですが、それもたまに、という感じだったので捨てちゃいました。&lt;/p&gt;

&lt;p&gt;もともとはリビングに置いてあったのですが、ダイニングテーブルを買ったり子供の電子ピアノを買ったり、子供のおもちゃが増えてきた結果リビングに置く場所がなくなり、別の部屋に移動した結果全く見なくなってしいまいました。&lt;/p&gt;

&lt;p&gt;ケーブルテレビも契約していたのですが、見なくなってもったいないなと感じたので、捨ててもろもろ解約しました。捨てるときは、家電リサイクル法に基づいて指定引取場所に直接搬入しました。8前くらいの古いやつだったのですが、3000円くらいしました。全部で1ヶ月くらいかかりましたが、機材の撤去、過払い分の返金なども含めて事務処理的なところも終わりました。&lt;/p&gt;

&lt;p&gt;ライブニュースはTwitterやFacebook、ニュースアプリで大体把握できるのと、YouTubeやAmazon Prime、Netflixがあるので、コンテンツ的にも充実しているというのもあり、見なくなってからも特に問題なく過ごせています。もともとあんまり見ない方だったというのもあるかもしれません。&lt;/p&gt;

&lt;p&gt;またテレビが見たくなってきたら買おうと思ってます。&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Dec 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/hobby/2020/12/02/discard-tv.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/hobby/2020/12/02/discard-tv.html</guid>
        
        <category>テレビ</category>
        
        <category>捨てる</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>Apple Silicon搭載 MacBook Pro M1で Homebrewとrbenvをインストールする</title>
        <description>&lt;p&gt;先日購入したApple Silicon搭載 MacBook Pro M1にこのブログをビルドするためにHomebrewとrbenvをインストールしたのでメモ。&lt;/p&gt;

&lt;h2 id=&quot;homebrewのインストール&quot;&gt;Homebrewのインストール&lt;/h2&gt;

&lt;p&gt;Homebrewには現状2つのインストール方法があるようです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TerminalをRosetta2を有効にして起動し通常インストールする&lt;/li&gt;
  &lt;li&gt;デフォルトではないディレクトリにネイティブインストールする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;せっかくのM1なので、Rosetta使う方法ではなく2のネイティブインストールしました。&lt;/p&gt;

&lt;p&gt;ネイティブインストールするには現状いくつかのステップが必要ですが、こちらのYoutubeとgistが参考になりました。&lt;/p&gt;

&lt;h4 id=&quot;youtube&quot;&gt;Youtube&lt;/h4&gt;

&lt;iframe class=&quot;w-100&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nv2ylxro7rM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;gist&quot;&gt;Gist&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/nrubin29/bea5aa83e8dfa91370fe83b62dad6dfa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/homebrew&lt;/code&gt;以下にインストールするのが今のところ一般的なようです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Homebrew/brew/issues/9177&quot;&gt;Discussion: longterm Homebrew prefix on Apple Silicon Macs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rbenvをインストールする&quot;&gt;rbenvをインストールする&lt;/h2&gt;

&lt;p&gt;rbenvは通常どおりhomebrewでインストール可能。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rbenv
rbenv init
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;eval &quot;$(rbenv init -)&quot;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その後rubyをインストールしようとするとopensslのコンパイルでエラー&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.2

Downloading openssl-1.1.1h.tar.gz...
-&amp;gt; https://dqw8nmjcqpjn7.cloudfront.net/5c9ca8774bd7b03e5784f26ae9e9e6d749c9da2438545077e6b3d755a06595d9
Installing openssl-1.1.1h...

BUILD FAILED &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;macOS 11.0.1 using ruby-build 20201118&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;opensslをインストールする&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;に設定を追記.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;export RUBY_CONFIGURE_OPTS=&quot;--with-openssl-dir=$(brew --prefix openssl@1.1)&quot;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再度rubyをインストール&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;無事インストールができました。&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/12/01/m1-macbook-rbenv-setup.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/12/01/m1-macbook-rbenv-setup.html</guid>
        
        <category>Apple Silicon</category>
        
        <category>Homebrew</category>
        
        <category>rbenv</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Apple Silicon搭載のMacBook Pro M1が危うく文鎮化するところだったので記録</title>
        <description>&lt;p&gt;Apple Silicon搭載のMacBook Pro 13インチを仕事用に購入したのですが、クリーンインストールしたところ文鎮化しかけたので記録しておきます。&lt;/p&gt;

&lt;h2 id=&quot;apple-silicon-m1搭載-macbook-pro-13インチの購入&quot;&gt;Apple Silicon M1搭載 MacBook Pro 13インチの購入&lt;/h2&gt;

&lt;p&gt;11月に発表されてから割とすぐに注文したのですが、受け取ったのが11月26日でした。夜にセットアップを開始しはじめました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;💻 &lt;a href=&quot;https://twitter.com/hashtag/MacBookProM1?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#MacBookProM1&lt;/a&gt; &lt;a href=&quot;https://t.co/w4LNZrpFba&quot;&gt;pic.twitter.com/w4LNZrpFba&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@masamichiueta) &lt;a href=&quot;https://twitter.com/masamichiueta/status/1331595674735968257?ref_src=twsrc%5Etfw&quot;&gt;November 25, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;セットアップしているとカーネルパニックが発生するようになった&quot;&gt;セットアップしているとカーネルパニックが発生するようになった&lt;/h2&gt;

&lt;p&gt;初期設定後、Xcode, Karabiner-Elements, VS Codeなど、いつも使っているアプリをもろもろインストールしていきました。&lt;/p&gt;

&lt;p&gt;あとは、マイナンバーカード読み取り用に、NFCカードリーダーのドライバをインストールしたんですが、うまく動きませんでした。&lt;/p&gt;

&lt;p&gt;その後、Macを再起動しようとすると、シャットダウンの途中で画面がおかしくなって、うまくシャットダウンできなくなってしまいました。起動後にカーネルパニックのアラートが表示されるようになり、焦りました。&lt;/p&gt;

&lt;p&gt;今思うとこの時点でエラーメッセージをぐぐっておけば原因が特定できたのですが、NFCカードリーダーが動かなかったので、そのドライバが悪かったかなーと思い、設定したてでカーネルパニックになるのも気持ち悪かったので、一度BigSurクリーンインストールすることにしました。&lt;/p&gt;

&lt;p&gt;ちなみに、原因はいつもお世話になっているKarabiner-Elementsだったようで、他にも同じ現象になる方がいるみたいです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pqrs-org/Karabiner-Elements/issues/2517&quot;&gt;Karabiner Elements causes Apple silicon MacBook Air to crash during system shutdown #2517&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コメントをみるにBigSur側の問題のようですが、アンインストールするとシャットダウンできるようになりました。&lt;/p&gt;

&lt;h2 id=&quot;クリーンインストールに失敗する&quot;&gt;クリーンインストールに失敗する&lt;/h2&gt;

&lt;p&gt;クリーンインストール作業を始めて、BigSurのインストール画面まで進んだのですが、エラーが表示されてインストールに失敗して進めなくなりました。いわゆる文鎮化。&lt;/p&gt;

&lt;p&gt;「アップデートの準備中にエラーが起きました。 Failed to personalize the software update. Please try again.」&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-27/bigsur-fail-install.jpeg&quot; alt=&quot;BigSurのクリーンインストール失敗&quot; title=&quot;BigSurのクリーンインストール失敗&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AppleがBigSurのクリーンインストールの際に文鎮化したMacの解決方法を公開していたので、公開されている方法を試していきました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT211983&quot;&gt;If you get a personalization error when reinstalling macOS on your Mac with Apple M1 chip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;なんとか復活&quot;&gt;なんとか復活&lt;/h2&gt;

&lt;p&gt;結果的に、上の記事で紹介されている全ての方法を試したのですが、唯一成功したのが、Apple Configuratorでファームウェアを復活させる方法でした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/guide/apple-configurator-2/revive-or-restore-a-mac-with-apple-silicon-apdd5f3c75ad/mac&quot;&gt;Revive or restore a Mac with Apple silicon with Apple Configurator 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それ以外にユーティリティ画面で対応する方法が3つほど紹介されていますが、どの方法でも最終的にBigSurのインストール画面で同じエラーが発生しました。&lt;/p&gt;

&lt;p&gt;Apple Configuratorによる修復は最後に試したのですが、こちらはなんとかうまくいき、無事M1 MacBookProを復活させることができました。&lt;/p&gt;

&lt;p&gt;実はこちらの方法の途中にも一度エラーがでて、諦めかけましたが、Apple  Configuratorを再起動してもう一度実行すると無事修復できました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-27/appleconfiguratorerror.jpg&quot; alt=&quot;Apple Configuratorのエラー&quot; title=&quot;Apple Configuratorのエラー&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後は交換を覚悟したのですが、なんとか無事復活することができてよかったです。かなり焦りました。。。&lt;/p&gt;

&lt;p&gt;同じ状態の方がいれば、参考にしてもらえるといいかと思います。&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Nov 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/11/27/macbookpro-m1-apple-silicon-recovery.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/11/27/macbookpro-m1-apple-silicon-recovery.html</guid>
        
        <category>MacBook Pro</category>
        
        <category>Apple</category>
        
        <category>Apple Silicon</category>
        
        <category>M1</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>PIXAR &lt;ピクサー&gt; 世界一のアニメーション企業の今まで語られなかったお金の話 を読んだ</title>
        <description>&lt;p&gt;「PIXAR &lt;ピクサー&gt; 世界一のアニメーション企業の今まで語られなかったお金の話」がPrime Readingで利用可能になっていたので、読みました。&lt;/ピクサー&gt;&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07PQDKFMR&amp;amp;linkId=53988c136e84eb27db3c39aeeb27798a&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;英語のタイトルは、「To Pixar and Beyond: My Unlikely Journey with Steve Jobs to Make Entertainment History」のようです。&lt;/p&gt;

&lt;p&gt;ピクサーの本については、「ピクサー流　創造するちから」という本を読んだことがありますがこちらはピクサーのクリエイティビティに関する歴史や、ピクサーのクリエイティビティがどのようにして生まれるうか、アニメーションがどのようにして作られるかといったことが中心だったと思います。&lt;/p&gt;

&lt;p&gt;一方こちらの本は、そのクリエイティビティの裏で、ピクサーの資金的な問題や、事業戦略をどうするかなど、経営視点でのドキュメンタリーになっています。&lt;/p&gt;

&lt;p&gt;この本を読んだことで、トイストーリーが大ヒットしたこと、それに伴いIPOが大成功したこと、ディズニーとの交渉がうまくいったことなど、数々の奇跡的な出来事が重なって、今のピクサーが出来上がったのだなということを知ることができました。&lt;/p&gt;

&lt;p&gt;こういった不可能に近い苦難を乗り越えて目標を達成できるというのは、素晴らしいなと思います。&lt;/p&gt;

&lt;p&gt;特に良かったのは、クリエイティブ面の責任を経営幹部ではなくジョン・ラセター率いるストーリーチームに任せたところでした。制作の予算の管理ができなくなる一方、クリエイティブの自由を優先したというところが、ピクサーという会社を象徴しているなと感じました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Prime reading で読める&lt;br /&gt;面白かったー&lt;br /&gt;&lt;br /&gt;PIXAR &amp;lt;ピクサー&amp;gt; 世界一のアニメーション企業の今まで語られなかったお金の話 ローレンス・レビー &lt;a href=&quot;https://t.co/D9Be4xK0RF&quot;&gt;https://t.co/D9Be4xK0RF&lt;/a&gt; &lt;a href=&quot;https://twitter.com/AmazonJP?ref_src=twsrc%5Etfw&quot;&gt;@amazonJP&lt;/a&gt;より&lt;/p&gt;&amp;mdash; Masamichi Ueta (@masamichiueta) &lt;a href=&quot;https://twitter.com/masamichiueta/status/1277624066736701445?ref_src=twsrc%5Etfw&quot;&gt;June 29, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sun, 28 Jun 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/hobby/2020/06/28/to-pixar-and-beyond.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/hobby/2020/06/28/to-pixar-and-beyond.html</guid>
        
        <category>ピクサー</category>
        
        <category>Apple</category>
        
        <category>本</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>Platform State of the Unionまとめ</title>
        <description>&lt;h1 id=&quot;platform-state-of-the-unionまとめ&quot;&gt;Platform State of the Unionまとめ&lt;/h1&gt;

&lt;h2 id=&quot;find-my&quot;&gt;Find My&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Apple Device以外のものも検出可能になる可能性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apple-silicon&quot;&gt;Apple Silicon&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;iPhone, iPadで使われているチップをMacに取り込む&lt;/li&gt;
  &lt;li&gt;ハイパフォーマンス、低消費電力&lt;/li&gt;
  &lt;li&gt;全てのデバイスで統一されたアーキテクチャ&lt;/li&gt;
  &lt;li&gt;Intel, Apple Siliconの両方に対応したユニバーサルアプリをビルドすることができる&lt;/li&gt;
  &lt;li&gt;UnityもApple Siliconで動作するバージョンをリリース予定&lt;/li&gt;
  &lt;li&gt;Big SurにはRosetta2というエミュレータが搭載されており、Apple Siliconのネイティブアプリでなくても実行することができる&lt;/li&gt;
  &lt;li&gt;AOT&lt;/li&gt;
  &lt;li&gt;JITプラットフォームではDynamic translation&lt;/li&gt;
  &lt;li&gt;XcodeからRosetta環境で実行することも可能&lt;/li&gt;
  &lt;li&gt;iOS, iPadのアプリを変更なしで実行できるようになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macos11-big-sur&quot;&gt;macOS11 Big Sur&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;デザインの刷新
    &lt;ul&gt;
      &lt;li&gt;アイコン&lt;/li&gt;
      &lt;li&gt;ウィジェット、通知センター&lt;/li&gt;
      &lt;li&gt;ツールバー、サイドバー&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipados&quot;&gt;iPadOS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;これまでのタブバースタイルからサイドバーのスタイルに移行&lt;/li&gt;
  &lt;li&gt;LiDARによって様々な計測が可能に&lt;/li&gt;
  &lt;li&gt;Apple Pencilでオブジェクトの認識が可能に&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios14&quot;&gt;iOS14&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ウィジェット
    &lt;ul&gt;
      &lt;li&gt;3つのサイズに対応&lt;/li&gt;
      &lt;li&gt;SwiftUIで作成可能&lt;/li&gt;
      &lt;li&gt;ホームスクリーンで表示できる&lt;/li&gt;
      &lt;li&gt;WidgetKitによって、Viewをアーカイブから作成しパフォーマンスを向上させる&lt;/li&gt;
      &lt;li&gt;ウィジェットをスタック形式で表示することも可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App Clipds
    &lt;ul&gt;
      &lt;li&gt;App Clipsのカードは自動生成される&lt;/li&gt;
      &lt;li&gt;カードをタップするとアプリのダウンロードが始まる&lt;/li&gt;
      &lt;li&gt;ホームには表示されない&lt;/li&gt;
      &lt;li&gt;App Clip code&lt;/li&gt;
      &lt;li&gt;10MB以下でアプリに含めることができる&lt;/li&gt;
      &lt;li&gt;8時間は通知を表示することができる&lt;/li&gt;
      &lt;li&gt;SignInWithAppleやApplePayが使える&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watchos7&quot;&gt;watchOS7&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SwiftUIのcomplicationをサポート&lt;/li&gt;
  &lt;li&gt;WatchFaceの共有機能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xcode12&quot;&gt;Xcode12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;デザインのBigSur対応&lt;/li&gt;
  &lt;li&gt;ドキュメントタブでファイルを一括で開いたりできるように&lt;/li&gt;
  &lt;li&gt;SwiftUIのビューをライブラリに追加することが可能に&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;swiftui&quot;&gt;SwiftUI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;VStack, HStackにLazyバージョンが追加されパフォーマンス、メモリ管理が効率化&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/06/23/wwdc2020-platform-state-of-the-union.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/06/23/wwdc2020-platform-state-of-the-union.html</guid>
        
        <category>WWDC2020</category>
        
        <category>Apple</category>
        
        <category>アップル</category>
        
        <category>iOS</category>
        
        <category>macOS</category>
        
        <category>watchOS</category>
        
        <category>tvOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>WWDC2020キーノートまとめ</title>
        <description>&lt;h1 id=&quot;wwdc2020-キーノートまとめ&quot;&gt;WWDC2020 キーノートまとめ&lt;/h1&gt;

&lt;h2 id=&quot;ios14&quot;&gt;iOS14&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ホーム画面のアップデート&lt;/li&gt;
  &lt;li&gt;App Libraryという新しいアプリ管理方法が追加
    &lt;ul&gt;
      &lt;li&gt;アプリへのアクセスが簡単になる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ウィジェットの新しいサイズが追加
    &lt;ul&gt;
      &lt;li&gt;またウィジェットをホームスクリーンに追加することが可能になった&lt;/li&gt;
      &lt;li&gt;スマートスタックを使うことでホーム画面上でウィジェットをスクロールして切り替えが可能になった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;動画のPicture in Pictureに対応
    &lt;ul&gt;
      &lt;li&gt;動画を再生しながらアプリを切り替えられるように&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Siriのデザインが更新される&lt;/li&gt;
  &lt;li&gt;Message
    &lt;ul&gt;
      &lt;li&gt;メッセージをピンできるようになった&lt;/li&gt;
      &lt;li&gt;Memojiに新しいスタイルが追加（マスクも）&lt;/li&gt;
      &lt;li&gt;インラインメッセージ（スレッド）とメンション機能が追加&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Map
    &lt;ul&gt;
      &lt;li&gt;経路の検索手段に自転車が追加&lt;/li&gt;
      &lt;li&gt;EV対応&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CarPlay
    &lt;ul&gt;
      &lt;li&gt;壁紙を変更可能に&lt;/li&gt;
      &lt;li&gt;NFCで車の鍵を開けられるように&lt;/li&gt;
      &lt;li&gt;メッセージで鍵をシェアできる&lt;/li&gt;
      &lt;li&gt;Walletアプリに鍵が追加される&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App Store
    &lt;ul&gt;
      &lt;li&gt;App Clipsというミニアプリのような機能が追加される&lt;/li&gt;
      &lt;li&gt;App ClipコードというQRコードやNFC、Safariから起動できる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipados14&quot;&gt;iPadOS14&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;iOS14と同じ新しいデザインのウィジェット&lt;/li&gt;
  &lt;li&gt;Photos
    &lt;ul&gt;
      &lt;li&gt;サイドバーで検索が簡単に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;電話の通知画面が小さく&lt;/li&gt;
  &lt;li&gt;Spotlightが使いやすくなる&lt;/li&gt;
  &lt;li&gt;Apple Pencil
    &lt;ul&gt;
      &lt;li&gt;Apple Pencilで書いたオブジェクトの認識に対応、手書き図形の補正や文字認識が可能に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;airpods&quot;&gt;AirPods&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;デバイス間で自動的にAirPodsをスイッチできるようになる&lt;/li&gt;
  &lt;li&gt;Spacial Audioアルゴリズムに対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watchos7&quot;&gt;watchOS7&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;watch faceの共有が可能になった&lt;/li&gt;
  &lt;li&gt;Maps
    &lt;ul&gt;
      &lt;li&gt;自転車の経路対応&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Workoutがダンスに対応&lt;/li&gt;
  &lt;li&gt;睡眠の解析に対応&lt;/li&gt;
  &lt;li&gt;手洗いの検出に対応、手洗い時間の計測&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;privacy&quot;&gt;Privacy&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;録画中のインディケーターが追加&lt;/li&gt;
  &lt;li&gt;AppStoreにアプリがh使用する情報がより明確に表示されるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tvos&quot;&gt;tvOS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HomeKit, 顔認識&lt;/li&gt;
  &lt;li&gt;Picture in pictureの対応&lt;/li&gt;
  &lt;li&gt;AppleTV+の新シリーズ FOUNDATION&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macos11-bigsur&quot;&gt;macOS11 BigSur&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;デザインの刷新
    &lt;ul&gt;
      &lt;li&gt;アイコンがiOSと同じような形に&lt;/li&gt;
      &lt;li&gt;ウィジェット、通知センターのデザイン変更&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Messages
    &lt;ul&gt;
      &lt;li&gt;検索対応&lt;/li&gt;
      &lt;li&gt;Memoji対応&lt;/li&gt;
      &lt;li&gt;ピン、グループ対応&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maps
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mac Catalyst
    &lt;ul&gt;
      &lt;li&gt;MapとMessagesがCatalystに移行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macの独自cpuへの移行&quot;&gt;Macの独自CPUへの移行&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Apple Silicon&lt;/li&gt;
  &lt;li&gt;アプリの最ビルドなしでもロゼッタ2によって自動的に変換される&lt;/li&gt;
  &lt;li&gt;Developer Transition Kitに申し込むとApple SiliconのMac miniを使うことができる&lt;/li&gt;
  &lt;li&gt;今後2年間でApple Siliconへ移行していく&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/06/23/wwdc2020-keynote.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/06/23/wwdc2020-keynote.html</guid>
        
        <category>WWDC2020</category>
        
        <category>Apple</category>
        
        <category>アップル</category>
        
        <category>iOS</category>
        
        <category>macOS</category>
        
        <category>watchOS</category>
        
        <category>tvOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part4 自分のオリジナルのテーマを作る</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成すr - Part4 自分のオリジナルのテーマを作る」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllのテーマのカスタマイズする&quot;&gt;Jekyllのテーマのカスタマイズする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;前回の記事&lt;/a&gt;ではJekyllの設定をカスタマイズする方法を紹介しました。&lt;/p&gt;

&lt;p&gt;カスタマイズするとはいえ、既存のテーマを使っていました。&lt;/p&gt;

&lt;p&gt;Jekyllでは既存のテーマを使うこともできるのですが、さらに一歩踏み込んで、自分で既存のテーマをカスタマイズしたり、テーマを作ることもできます。&lt;/p&gt;

&lt;p&gt;まずは、既存のテーマをカスタマイズする方法について紹介します。&lt;/p&gt;

&lt;h2 id=&quot;既存のテーマをカスタマイズする&quot;&gt;既存のテーマをカスタマイズする&lt;/h2&gt;

&lt;p&gt;Jekyllでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;で設定しているテーマを使いつつ、自分で少しカスタマイズすることができます。
カスタマイズ方法はテーマによったりもするのですが、例えばデフォルトのテーマ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;では、&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;GitHubのリポジトリ&lt;/a&gt;にカスタマイズ方法が記載されています。&lt;/p&gt;

&lt;p&gt;Jekyllはディレクトリの構造が決められているので、そのルールにしたがって定義されているファイルを上書きすることで、カスタマイズすることができます。&lt;/p&gt;

&lt;p&gt;例えば、ヘッダー部分をカスタマイズしたい場合は、自分のリポジトリに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;フォルダを作成して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;を作成します。ゼロから作るのは難しいと思うので、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;のデフォルトの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt;をコピーした上でカスタマイズしていくと良いと思います。&lt;/p&gt;

&lt;p&gt;Jekyllでは&lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt;というテンプレートを処理するための言語が使用されています。Liquidを使うことでテンプレートの中でif文によって分岐やループ処理を書くことができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;Jekyllでは様々な変数が定義されている&lt;/a&gt;ので、それらを使ってテンプレートを書いていくことでレイアウトやページを作成していきます。&lt;/p&gt;

&lt;p&gt;レイアウトをカスタマイズする場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;フォルダを作りカスタマイズしたいレイアウトのhtmlファイルと同じファイル名でhtmlを作成し中身を上書きします。&lt;/p&gt;

&lt;p&gt;こちらも0から作るのは大変なので、既存のレイアウトをコピーしてからカスタマイズしていくといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;ではcssをカスタマイズすることも可能です。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/css/style.scss&lt;/code&gt;というファイルを作成します。拡張子からもわかるようにJekyllはsassをサポートしており、sassで記述していくことが可能です。&lt;/p&gt;

&lt;p&gt;またファイルの先頭には以下を記述する必要があります。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
---

@import &quot;minima/skins/classic&quot;;
@import &quot;minima/initialize&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように既存のテーマをカスタマイズしていく場合は、基本的にはテーマで定義されているファイルを上書きして自分のファイルを作成する、という手順になります。&lt;/p&gt;

&lt;h2 id=&quot;自分のテーマを作る&quot;&gt;自分のテーマを作る&lt;/h2&gt;

&lt;p&gt;Jekyllでは既存のテーマをカスタマイズするだけでなく、自分のテーマを作ることもできます。&lt;/p&gt;

&lt;p&gt;これまではGemで公開されているテーマを使ってきましたが、Jekyllのディレクトリ構造にしたがって、必要なファイルを作成すれば自分のオリジナルのページを作ることができます。Wordpressでテーマを作るのに似ています。&lt;/p&gt;

&lt;p&gt;Jekyllのディレクトリやテンプレート言語のLiquidの使い方については&lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;Jekyllの公式サイト&lt;/a&gt;に書かれています。テンプレートの作り方全てを紹介するのは難しいのですが、基本的にはレイアウトに使われるhtmlやヘッダー・フッターなどの共通のhtmlなどを作成していくような形になります。&lt;/p&gt;

&lt;p&gt;既存のテーマをカスタマイズする場合は、上書きしない部分を変更する必要はありませんでしたが、自分でテーマを作る場合は全て作る必要があります。しかしかなり柔軟にレイアウトを作成することができるので、まずはテーマを使ってみて、不満な部分があれば自分でテーマを作ってみるのをお勧めします。&lt;/p&gt;

&lt;p&gt;ちなみに、このブログは自分でレイアウトを作成しています。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Part1からPart4で、GitHub Pagesで無料ブログを作成する方法を詳しく説明してみました。形さえ出来あがればあとはMarkdownで記事を書いていくだけで、とても使いやすいのでGitHub Pagesを使ったサイト作りはお勧めです。&lt;/p&gt;

&lt;p&gt;Jekyllでサイト自体は生成できるので、静的サイトをホスティングできるところであればGitHub Pagesではなくても同じサイトを構築することができる点もメリットですね。もしファイルサイズはアクセス数に引っかかってしまった場合も、例えばAWSのS3のような場所に引越ししやすいのではないかと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 31 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part3 Jekyllの設定をカスタマイズする</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成する - Part3 Jekyllの設定をカスタマイズする」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ローカルでjekyllを実行する&quot;&gt;ローカルでJekyllを実行する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;前回の記事&lt;/a&gt;では、Jekyllのテーマを利用する方法と記事を追加する方法を紹介しました。&lt;/p&gt;

&lt;p&gt;今回はさらにJekyllをカスタマイズしていきますが、確認を簡単にするためにまずJekyllをローカル環境で実行する方法を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyllのサイト&lt;/a&gt;に書いてありますが、gemでjekyllをbundlerをインストールして起動することができます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler
$ cd your-repository
$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これまで作成したブログのリポジトリをクローンして、jekyllを実行できるようにします。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone your-repository
$ cd your-repository
$ bundle exec jekyll new . --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force&lt;/code&gt; オプションをつけるとこれまで作成したファイルがいったんJekyllのテンプレートで上書きされます。&lt;/p&gt;

&lt;p&gt;デフォルトでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;というテーマが有効になっています。&lt;/p&gt;

&lt;p&gt;その状態でJekyllを実行してみます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行するとローカルでブログを立ち上げることができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404.html&lt;/code&gt;が生成されていたり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;が上書きされています。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;で初期化するとデフォルトのテーマである&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;が適用されるので、今後は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;のテーマを想定して作っていきます。&lt;/p&gt;

&lt;h2 id=&quot;github-pagesのプラグインとテーマを使う&quot;&gt;GitHub Pagesのプラグインとテーマを使う&lt;/h2&gt;

&lt;p&gt;もし、元々使っていたGitHub Pagesのテーマを使いたい場合には、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;のプラグインを入れる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を見ると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;というgemがコメントアウトされていると思うので、記載されているコメントにしたがってコメントアウトを外します。
それに伴い、jekyllの方はコメントアウトします。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This will help ensure the proper Jekyll version is running.
# Happy Jekylling!
# gem &quot;jekyll&quot;, &quot;~&amp;gt; 3.8.7&quot;

# If you want to use GitHub Pages, remove the &quot;gem &quot;jekyll&quot;&quot; above and
# uncomment the line below. To upgrade, run `bundle update github-pages`.
gem &quot;github-pages&quot;, group: :jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そしてgemをアップデートします。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に記載されているthemeを例えば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-theme-cayman&lt;/code&gt;に戻して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;を元に戻せば、元々のテーマを使うことができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;を使う場合はそのままでオッケーです。&lt;/p&gt;

&lt;p&gt;上記のようにGitHub Pagesでは必要なGemをインストールして、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;を変更すると設定をカスタマイズすることができます。
例えばテーマを変更したりサイトのタイトルを編集することができます。&lt;/p&gt;

&lt;h2 id=&quot;レイアウトとページ&quot;&gt;レイアウトとページ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;で初期化すると &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404.html&lt;/code&gt;が追加されたと思います。jekyllではこのようにブログの記事以外に個別のページを作ることができます。&lt;/p&gt;

&lt;p&gt;例えば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;というファイルを作ると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://username.github.io/about/&lt;/code&gt;というページを作ることができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404.html&lt;/code&gt;は特別なファイルで、アクセスしたページが存在しないときに使われるファイルです。&lt;/p&gt;

&lt;p&gt;このようにページをどんどん作成することができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;を見ると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: page&lt;/code&gt;という設定がヘッダーのところに記載されていると思います。これは各テーマが作っているレイアウトのテンプレートを設定しています。テーマによって、いくつかのページのレイアウトが用意されていて、ページごとにどのレイアウトを使うかを設定できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;default&lt;/li&gt;
  &lt;li&gt;home&lt;/li&gt;
  &lt;li&gt;page&lt;/li&gt;
  &lt;li&gt;post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4つのレイアウトが用意されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;次のPart4&lt;/a&gt;では、レイアウトを自分で変更してオリジナルのテンプレートを作る方法を書いていきます。&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part2 Jekyllを使ってみる</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成する - Part2 Jekyllを使ってみる」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllとは&quot;&gt;Jekyllとは&lt;/h2&gt;

&lt;p&gt;JekyllはGitHub Pagesで使用することができる静的サイトのジェネレータです。Jekyllを使うことで、Markdownで書いたブログの記事やhtmlで作ったページをビルドして、公開用のhtmlとして生成することができます。&lt;/p&gt;

&lt;p&gt;htmlを事前に生成して、公開時にはサーバーサイドによる動的な処理を実行せずhtmlを表示するだけなので、静的サイトになります。
JekyllにはWordpressのように、いくつかのテーマが提供されていて、それらを活用することで簡単にブログサイトを構築することができます。&lt;/p&gt;

&lt;p&gt;静的サイトジェネレータは他にも&lt;a href=&quot;https://gohugo.io&quot;&gt;HUGO&lt;/a&gt;や&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby&lt;/a&gt;などがありますが、GitHub Pagesはデフォルトで&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;をサポートしています。そのため、特別なカスタマイズをしなければ、Jekyllで事前にビルドする必要もなくGitHub Pagesでテーマを活用したブログを構築することができます。&lt;/p&gt;

&lt;h2 id=&quot;jekyllを使ってみる&quot;&gt;Jekyllを使ってみる&lt;/h2&gt;

&lt;p&gt;GitHub PagesでJekyllのテンプレートを使うのは簡単です。リポジトリのメニューからSettingsを開いて、下の方にあるGitHub Pagesの設定をみると、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Choose a theme&lt;/code&gt; というメニューがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-26/chooseatheme.png&quot; alt=&quot;Choose a theme&quot; title=&quot;Choose a theme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンをクリックするとテーマセレクタ画面が表示されます。テーマを選択することでプレビューを見ることもできます。
良さそうなテーマがあれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Select theme&lt;/code&gt;で決定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-26/selecttheme.png&quot; alt=&quot;Select theme&quot; title=&quot;Select theme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;するとテーマが適用されます。具体的にはリポジトリに &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; というファイルが新しく追加されています。中身は以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;theme: jekyll-theme-cayman (実際に選んだテーマ)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyllはこの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に基づいて静的サイトを生成しますが、GitHub PagesはJekyllをサポートしているので既存のテーマを使うだけであればこれだけでテーマを適用することができます。&lt;/p&gt;

&lt;h2 id=&quot;新規ポストを投稿する&quot;&gt;新規ポストを投稿する&lt;/h2&gt;

&lt;p&gt;Jekyllのルールではブログの記事は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt;フォルダの中に、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;という形式で記事を配置する必要があります。例えば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020-05-26-first-post.md&lt;/code&gt;などです。&lt;/p&gt;

&lt;p&gt;Markdownファイルを作成したら、ファイルの一番上の部分にタイトルや日付などのメタデータを書き込み、その下に記事のコンテンツを書き込みます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: &quot;First post&quot;
date: 2020-05-26
---

# Fist post

First post

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをリポジトリに配置すれば記事が公開されます。&lt;/p&gt;

&lt;p&gt;トップページに記事の一覧を表示するには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;に以下を追記します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;ul&amp;gt;
  {% for post in site.posts %}
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&quot;{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichiueta.github.io/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;次のPart3&lt;/a&gt;ではJekyllの設定をカスタマイズする方法を書いていきます。&lt;/p&gt;
</description>
        <pubDate>Tue, 26 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html</link>
        <guid isPermaLink="true">https://masamichiueta.github.io/development/2020/05/26/github-pages-blog-part2-jekyll.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
  </channel>
</rss>
