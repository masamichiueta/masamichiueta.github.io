<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>micchyboy</title>
    <description>ソフトウェアエンジニアリング・デザイン・日常について投稿するブログ。開発系はSwift, iOSが中心。仮想通貨、お出かけ、ガジェットなども。</description>
    <link>https://micchyboy1023.github.iohttps://micchyboy1023.github.io/</link>
    <atom:link href="https://micchyboy1023.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 09 Jun 2018 17:35:21 +0900</pubDate>
    <lastBuildDate>Sat, 09 Jun 2018 17:35:21 +0900</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>よこすかYYのりものフェスタ2018に行ってきました</title>
        <description>&lt;h1 id=&quot;よこすかyyのりものフェスタ2018に行ってきました&quot;&gt;よこすかYYのりものフェスタ2018に行ってきました&lt;/h1&gt;

&lt;p&gt;横須賀駅で6月9日~6月10日に開催されている「よこすかYYのりものフェスタ2018」に行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cocoyoko.net/event/norimono-fes.html&quot;&gt;よこすかYYのりものフェスタ2018&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Webサイトから抜粋&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;鉄道や自動車、海上自衛隊の艦艇など、さまざまな分野の「のりもの」が横須賀に大集合！子ども向け制服記念撮影やミニ鉄道、よこすかグルメの出店もあり、家族みんなで楽しめるイベントです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで横須賀駅を降りると、いきなりプラレールが展示されていました。
JR東日本展示には作業車両の展示も。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/zKQb3NXArs&quot;&gt;pic.twitter.com/zKQb3NXArs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005278885880008704?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;11時30分くらいには、横須賀駅の2番線に黒船電車がきて、車内でご飯を食べたりできました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;黒船電車&lt;br /&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/eNOrAYKEoU&quot;&gt;pic.twitter.com/eNOrAYKEoU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005297508078108672?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;黒船電車はゆったりしていて、よかったですね〜。&lt;/p&gt;

&lt;p&gt;そのあとは、自衛隊の方の展示に行って、試験艦あすかとヘリコプターの展示をみてきました。&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/ClgrwUEWMg&quot;&gt;pic.twitter.com/ClgrwUEWMg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005335778350718976?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/sYKi2Bui4b&quot;&gt;pic.twitter.com/sYKi2Bui4b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005335898962006016?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;無料でこれだけ楽しめるのは、なかなかないイベントだと思います！&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/family/2018/06/09/yokosukayynorimonofesta2018.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/family/2018/06/09/yokosukayynorimonofesta2018.html</guid>
        
        <category>よこすかYYのりものフェスタ</category>
        
        <category>横須賀</category>
        
        <category>黒船電車</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>Swift4.2ではEnumを一覧で取得できるようになった</title>
        <description>&lt;h1 id=&quot;swift42ではenumを一覧で取得できるようになった&quot;&gt;Swift4.2ではEnumを一覧で取得できるようになった&lt;/h1&gt;

&lt;p&gt;WWDC2018の&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/401/&quot;&gt;What’s new in Swift&lt;/a&gt;でSwift4.2のアップデートが発表されていました。&lt;/p&gt;

&lt;p&gt;Swift4.2では、&lt;code class=&quot;highlighter-rouge&quot;&gt;CaseIterable&lt;/code&gt; プロトコルをEnumに指定することで、&lt;code class=&quot;highlighter-rouge&quot;&gt;allCases&lt;/code&gt;というプロパティが使用できるようになり、Enumの一覧を取得できるようになったようです。&lt;/p&gt;

&lt;p&gt;Swift Evolutionはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md&quot;&gt;Derived Collection of Enum Cases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enumの一覧をループで回すのは、結構やりたい時があって、ビデオのようにEnumの全ケースを入れたArrayを定義するということをやることがありましたが、これは便利ですね。&lt;/p&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CaseIterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trot&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gallop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jog&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Fri, 08 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/08/whats-new-swift42.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/08/whats-new-swift42.html</guid>
        
        <category>Swift</category>
        
        <category>Enum</category>
        
        <category>iOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>WWDC2018で発表された機械学習モデル生成フレームワーク Create MLについて</title>
        <description>&lt;h1 id=&quot;create-ml&quot;&gt;Create ML&lt;/h1&gt;

&lt;p&gt;WWDC2018で、機械学習モデルをmacOS Mojave上で簡単に作成することができるフレームワーク &lt;code class=&quot;highlighter-rouge&quot;&gt;Create ML&lt;/code&gt;が発表されました。&lt;/p&gt;

&lt;p&gt;セッションのビデオはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/703/&quot;&gt;Introducing Create ML&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;何ができる&quot;&gt;何ができる？&lt;/h2&gt;

&lt;p&gt;セッションのビデオでは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画像の分類&lt;/li&gt;
  &lt;li&gt;テキストの判定&lt;/li&gt;
  &lt;li&gt;テーブルデータ(csvなど）によるデータの推測&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のモデル作成と実際の分類のデモが行われていました。&lt;/p&gt;

&lt;h2 id=&quot;画像認識用学習モデルの作成&quot;&gt;画像認識用学習モデルの作成&lt;/h2&gt;

&lt;h3 id=&quot;transfer-learning&quot;&gt;Transfer Learning&lt;/h3&gt;

&lt;p&gt;注目はTransfer Learningというところで、Appleが事前に学習させたモデルを利用することで、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;モデルサイズの縮小&lt;/li&gt;
  &lt;li&gt;モデル作成時間の短縮&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が可能になったようです。&lt;/p&gt;

&lt;p&gt;また、Playground上でモデルを作成するデモもありました。
画像のファイルをフォルダごと突っ込むことで学習させていましたが、ファイル名やフォルダ名がラベルになるようですね。&lt;/p&gt;

&lt;h3 id=&quot;モデルの作り方&quot;&gt;モデルの作り方&lt;/h3&gt;

&lt;p&gt;デモでは以下のようなSwiftスクリプトでモデルが作成されていました。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#!/usr/bin/swift&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreateML&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Specify Data&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trainDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/Fruits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/TestFruits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLImageClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trainingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labeledDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Evaluate Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;evaluation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labeledDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Save Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/FruitClassifier.mlmodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ swift fruitClassifier.swift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上のような形で、モデルが作成できるようです。&lt;/p&gt;

&lt;h2 id=&quot;テキストのラベリング&quot;&gt;テキストのラベリング&lt;/h2&gt;

&lt;p&gt;セッションのデモでは、ユーザーが入力したテキストから、そのテキストがネガティブかポジティブかを判定するデモがありました。
SNS系のアプリで、コメントを制御する時に便利そうですね！&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/07/create-ml-wwdc2018.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/07/create-ml-wwdc2018.html</guid>
        
        <category>WWDC2018</category>
        
        <category>WWDC</category>
        
        <category>CreateML</category>
        
        <category>人工知能</category>
        
        <category>機械学習</category>
        
        <category>マシーンラーニング</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>ffmpegを使ってmovファイルをgifに変換する</title>
        <description>&lt;h1 id=&quot;movをgifに変換する&quot;&gt;movをgifに変換する&lt;/h1&gt;

&lt;p&gt;アプリの開発で、スクリーンを動画でキャプチャしてgifにして貼り付けるということをよく行うと思いますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;を使用すると簡単にmovをgifに変更できました。&lt;/p&gt;

&lt;p&gt;まずffmpegをインストールします&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストールするとffmpegが使用できるようになるので、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i [input file].mov -r [frame rate] [output file].gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i screen.mov -r 24 screen.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにうつと、ffmpegがmovをgifに変換してくれます。&lt;/p&gt;

&lt;p&gt;ffmpegの使い方はこちらのページが参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.ckme.co.jp/ffmpeg_basic.shtml&quot;&gt;ffmpegの最も基本的な使い方&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/06/mov-to-gif-with-ffmpeg.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/06/mov-to-gif-with-ffmpeg.html</guid>
        
        <category>ffmpeg</category>
        
        <category>mov</category>
        
        <category>gif</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>WWDC2018キーノートまとめ</title>
        <description>&lt;h1 id=&quot;wwdc2018-キーノートまとめ&quot;&gt;WWDC2018 キーノートまとめ&lt;/h1&gt;

&lt;h2 id=&quot;ios-12&quot;&gt;iOS 12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;パフォーマンスの向上&lt;/li&gt;
  &lt;li&gt;ARKit2 マルチユーザーに対応&lt;/li&gt;
  &lt;li&gt;Measureアプリが追加、ARでもののサイズを測れる&lt;/li&gt;
  &lt;li&gt;Siriが色々アップデート&lt;/li&gt;
  &lt;li&gt;株価、ニュース、ボイスメモアプリのリデザイン&lt;/li&gt;
  &lt;li&gt;iBooksがApple Bookに変更、リデザイン&lt;/li&gt;
  &lt;li&gt;通知のグループ化が可能になった&lt;/li&gt;
  &lt;li&gt;どれくらいiPhoneを使用しているかがわかるようになった、アプリごとの使用時間を決めて制限することも可能&lt;/li&gt;
  &lt;li&gt;Animojiにキャラが追加&lt;/li&gt;
  &lt;li&gt;MeMojiで自分の顔文字を追加することができるように&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watchos-5&quot;&gt;watchOS 5&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ヨガやハイキングなど新しいアクティビティの追加&lt;/li&gt;
  &lt;li&gt;ウォッチ同士でトランシーバーが可能に&lt;/li&gt;
  &lt;li&gt;通知が強化&lt;/li&gt;
  &lt;li&gt;ウェブビューが表示できるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tvos-12&quot;&gt;tvOS 12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;音がよくなった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macos-1014-mojaveモハーヴェ&quot;&gt;macOS 10.14 Mojave（モハーヴェ）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ダークモードが追加された&lt;/li&gt;
  &lt;li&gt;デスクトップのファイルを整理するStack&lt;/li&gt;
  &lt;li&gt;Finderの新しい表示 ギャラリービュー&lt;/li&gt;
  &lt;li&gt;News, 株価, ボイスメモ, ホームアプリが追加&lt;/li&gt;
  &lt;li&gt;CreateMLという機械学習モデル作成フレームワークが追加された&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あんまりすごい発表はなかったですかねぇ。&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 02:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/05/wwdc2018-keynote.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/05/wwdc2018-keynote.html</guid>
        
        <category>WWDC2018</category>
        
        <category>Apple</category>
        
        <category>アップル</category>
        
        <category>iOS</category>
        
        <category>macOS</category>
        
        <category>watchOS</category>
        
        <category>tvOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>ASP.NET Coreでエラーメッセージを日本語にする方法</title>
        <description>&lt;p&gt;ASP.NET CoreでWebアプリを開発していますが、デフォルトのバリデーションの仕組みを使うとエラーメッセージが英語になってしまい困っていました。&lt;/p&gt;

&lt;p&gt;モデルクラスのプロパティに全部のパターンを日本語で書くとか途方もないことをしたくないと思っていたところ、解決する方法を見つけました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/h0ge/items/b7ffd65d0f11ac6382fd&quot;&gt;ASP.NET Coreでエラーメッセージを日本語で表示する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;元ネタはこちらの記事のようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/mvpawardprogram/2017/05/09/aspnetcore-mvc-error-message/&quot;&gt;Customization And Localization Of ASP.NET Core MVC Default Validation Error Messages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エラーメッセージはこんな感じでローカライズしました。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RequiredAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は必須項目です&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MaxLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以内で入力してください&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MinLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以上で入力してください&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EmailAddressAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}の形式が正しくありません。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CompareAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}と{1}が一致しません。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StringLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以上{2}文字以下で入力してください。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/05/asp-dotnet-core-error-japanese.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/05/asp-dotnet-core-error-japanese.html</guid>
        
        <category>ASP.NET Core</category>
        
        <category>C#</category>
        
        <category>ASP.NET</category>
        
        <category>ローカライズ</category>
        
        <category>日本語化</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>子育てハック　子供2人（3歳0歳）の私が子供が生まれてから買ってよかったもの</title>
        <description>&lt;h1 id=&quot;子育てハック子供2人3歳0歳の私が子供が生まれてから買ってよかったもの&quot;&gt;子育てハック　子供2人（3歳0歳）の私が子供が生まれてから買ってよかったもの&lt;/h1&gt;

&lt;p&gt;昨年年末に第2子が生まれて家がにぎやかになりました。
子供がいるとできるだけ家事の負担を下げたかったり、週末はお出かけしたかったりすると思うのですが、そのために買ってよかったなと思うものをまとめておきます。&lt;/p&gt;

&lt;h2 id=&quot;ルンバ&quot;&gt;ルンバ&lt;/h2&gt;

&lt;p&gt;まずは、ルンバです。
これまでは掃除機で掃除していましたが、日々の掃除をルンバにお願いするようにしました。&lt;/p&gt;

&lt;p&gt;私が購入したのは、ルンバ960です。&lt;/p&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01JYD3OCE&amp;amp;linkId=286a86d44a3a44445cb086a7f83864e7&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;購入したといっても、溜まっていたクレジットカードのポイントで購入しました。&lt;/p&gt;

&lt;p&gt;ルンバを導入してから、ほとんど自分で掃除することがなくなりました。流石に細かいところはルンバで掃除しきれませんが、その程度のことは毎日しなくてもよいので日々の掃除はルンバに任せることができます。&lt;/p&gt;

&lt;p&gt;ルンバのアプリで毎日の掃除時間をスケジューリングできるので、非常に便利ですね！
家の掃除から解放されることで子供や他のことで時間が使えるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-03/roomba.png&quot; alt=&quot;ルンバのアプリ&quot; title=&quot;ルンバのアプリ&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;テント&quot;&gt;テント&lt;/h2&gt;

&lt;p&gt;週末は子供とずっと家にいるのもよくないと思い、よく公園に出かけていますが、その際に便利なのがテントです。
公園の芝生などでお弁当を食べたりするのに、必須アイテムですね。&lt;/p&gt;

&lt;p&gt;私はAmazonのセールで、こちらのテントを購入しました。&lt;/p&gt;

&lt;p&gt;MRG ワンタッチテント 2～3人用 UPF50+ uvカットコーティング 防水加工 サンシェード テント キャリーバッグ付き&lt;/p&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01IVKXQSS&amp;amp;linkId=3d995c9af82c39cd4d92b31b34f2daa5&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;折りたたみできて広げるとなかなか広く、毎週末利用しています。&lt;/p&gt;

&lt;h2 id=&quot;お弁当箱&quot;&gt;お弁当箱&lt;/h2&gt;

&lt;p&gt;こちらも週末公園に行った時に、奥さんがお弁当を作ってくれるので必須アイテムです。
お弁当は3段のものを使っていて、子供と3人で食べています。&lt;/p&gt;

&lt;p&gt;大きめのお弁当がいいと思いますね。&lt;/p&gt;

&lt;h1 id=&quot;今後あってもいいかなと思うもの&quot;&gt;今後あってもいいかなと思うもの&lt;/h1&gt;

&lt;p&gt;食洗機があるといいなと思っています。
家事で時間がかかるのは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;洗濯&lt;/li&gt;
  &lt;li&gt;炊事&lt;/li&gt;
  &lt;li&gt;掃除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だと思うのですが、食洗機があればもっと家事の負担を減らせるなと思っています。&lt;/p&gt;

&lt;p&gt;何かおすすめがあれば、&lt;a href=&quot;https://twitter.com/micchyboy1023&quot;&gt;@micchyboy1023&lt;/a&gt;　まで教えてください。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/family/2018/06/03/goods-for-baby.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/family/2018/06/03/goods-for-baby.html</guid>
        
        <category>子供</category>
        
        <category>ルンバ</category>
        
        <category>ベビーカー</category>
        
        <category>子育て</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>rippled バージョン1.0.0がリリースされました</title>
        <description>&lt;p&gt;rippleの公式ブログで、rippled バージョン1.0.0のリリース記事が公開されました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;rippledのバージョン1.0.0がリリース&lt;a href=&quot;https://twitter.com/hashtag/xrp?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#xrp&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/ripple?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ripple&lt;/a&gt; &lt;a href=&quot;https://t.co/AmPvP7wQO6&quot;&gt;https://t.co/AmPvP7wQO6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1002530922460110848?ref_src=twsrc%5Etfw&quot;&gt;2018年6月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rippled&lt;/code&gt;のサーバーを運用している場合、2018年6月14日（木）までにバージョン1.0.0にアップグレードする必要があるようです。&lt;/p&gt;

&lt;p&gt;アップデートの方法はこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.ripple.com/update-rippled.html&quot;&gt;Update rippled&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;rippledとは&quot;&gt;rippledとは&lt;/h1&gt;

&lt;p&gt;そもそも&lt;code class=&quot;highlighter-rouge&quot;&gt;rippled&lt;/code&gt;とは何かですが、ウィキペディアによると&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rippled（リップルド）はP2Pリップルネットワークで動作するサーバーの中核モジュールである。[1]
それぞれのrippledサーバーはリップルネットワークに接続し、暗号通貨取引のリレー動作、ローカルにコピーした分散元帳のメンテナンスなどを実行する。rippledのソースコードはC++で記述されており、オープンソースライセンス[2]としてGitHubに登録されている。
ユーザー自身のrippledサーバーを実行させることができる。それぞれのrippledサーバーは、分散元帳のコンセンサスプロセス[3]に参加したり、取引の検証を実行することができる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのことです。&lt;/p&gt;

&lt;p&gt;つまり、&lt;code class=&quot;highlighter-rouge&quot;&gt;rippled&lt;/code&gt;を起動することで、リップルネットワークに参加できるということですね。&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 01:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/cryptocurrency/2018/06/01/rippled1.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/cryptocurrency/2018/06/01/rippled1.html</guid>
        
        <category>リップル</category>
        
        <category>Ripple</category>
        
        <category>XRP</category>
        
        <category>仮想通貨</category>
        
        <category>cryptocurrency</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>Swift for TensorFlowをインストールして試してみる</title>
        <description>&lt;p&gt;先日TensorFlow Dev Summit2018で&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift for TensorFlow&lt;/code&gt;が発表されました。&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/Yze693W4MaU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;同時にTensorFlowのWebサイトに&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift for TensorFlow&lt;/code&gt;のページができています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/community/swift&quot;&gt;Swift for TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私はTensorFlowについては初心者なのですが、今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift for TensorFlow&lt;/code&gt;をインストールして試してみました！&lt;/p&gt;

&lt;p&gt;基本的にはGitHubのREADMEを見ながら実行していきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tensorflow/swift/blob/master/Installation.md&quot;&gt;Install Swift for TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;インストール&quot;&gt;インストール&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;プレビルドパッケージをダウンロードする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私はmacを使っているので、GitHubのページから&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt;と書かれているものをダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://storage.googleapis.com/swift-tensorflow/mac/swift-tensorflow-DEVELOPMENT-2018-05-10-a-osx.pkg&quot;&gt;Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-01/download.png&quot; alt=&quot;Download Swift for TensorFlow&quot; title=&quot;Download Swift for TensorFlow&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ダウンロードしたパッケージを実行する
実行すると、&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Developer/Toolchains/&lt;/code&gt;にXcode toolchainが追加されます。Xcode toolchain（&lt;code class=&quot;highlighter-rouge&quot;&gt;.xctoolchain&lt;/code&gt;）には、コンパイラーやその他の開発ツールが含まれています。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Xcodeを開いて、&lt;code class=&quot;highlighter-rouge&quot;&gt;環境設定&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Compnents &amp;gt; Toolchains&lt;/code&gt;にいき、インストールされた`Swift for TensorFlow toolchainを選択します。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-01/toolchain.png&quot; alt=&quot;Xcode toolchain&quot; title=&quot;Xcode toolchain&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;toolchainの選択はXcodeのみに適用されるので、コマンドラインを仕様する場合は、Swift toolchainをパスに追記する必要があります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/Library/Developer/Toolchains/swift-latest/usr/bin:&quot;${PATH}&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これでインストールは完了です。&lt;/p&gt;

&lt;h1 id=&quot;swift-for-tensorflowを使ってみる&quot;&gt;Swift for TensorFlowを使ってみる&lt;/h1&gt;

&lt;p&gt;とりあえず使ってみるという部分はこちらに記載されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tensorflow/swift/blob/master/Usage.md&quot;&gt;Using Swift for TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;replread-eval-print-loop&quot;&gt;REPL(Read Eval Print Loop)&lt;/h2&gt;

&lt;p&gt;ターミナルを開いて、swiftを起動します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ swift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TensorFlowを実行してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt; import TensorFlow
2&amp;gt; var x = Tensor&amp;lt;Float&amp;gt;([[1, 2], [3, 4]])
x: TensorFlow.Tensor&amp;lt;Float&amp;gt; = [[1.0, 2.0], [3.0, 4.0]]
3&amp;gt; x + x
$R0: TensorFlow.Tensor&amp;lt;Float&amp;gt; = [[2.0, 4.0], [6.0, 8.0]]
4&amp;gt; for _ in 0..&amp;lt;3 {
5.     x += x
6. }
7&amp;gt; x
$R1: TensorFlow.Tensor&amp;lt;Float&amp;gt; = [[8.0, 16.0], [24.0, 32.0]]
8&amp;gt; x[0] + x[1]
$R2: TensorFlow.Tensor&amp;lt;Float&amp;gt; = [32.0, 48.0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;インタプリタ&quot;&gt;インタプリタ&lt;/h2&gt;

&lt;p&gt;スクリプト言語のようにインタプリタでSwiftを実行することができます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;inference.swift&lt;/code&gt;というファイルを作成して、以下のコードを書きます。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TensorFlow&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLPClassifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;w1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;w2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scalars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The ⊗ operator performs matrix multiplication.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⊗&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⊗&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLPClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;保存したら、swiftで実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ swift -O inference.swift
[[0.680704]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-O&lt;/code&gt;をつけることではSwiftで最適化された状態で実行されます。&lt;/p&gt;

&lt;h2 id=&quot;xcode&quot;&gt;Xcode&lt;/h2&gt;

&lt;p&gt;Xcodeで実行するには、上記インストール手順で、Xcodeのツールチェーンをインストールしたものに変更しておきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-01/toolchain.png&quot; alt=&quot;Xcode toolchain&quot; title=&quot;Xcode toolchain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新しいPlaygroundファイルを作成して、以下のコードを記述します。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TensorFlow&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;するとPlaygroundが実行されて、結果が表示されます。&lt;/p&gt;

&lt;p&gt;以上で&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift for TensorFlow&lt;/code&gt;でTensorFlowを使用することができました。&lt;/p&gt;

&lt;p&gt;次回は何かしらのモデルを学習させたり予測させたりしたいと思います。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/01/swift-for-tensorflow-installation.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/01/swift-for-tensorflow-installation.html</guid>
        
        <category>Swift</category>
        
        <category>Xcode</category>
        
        <category>TensorFlow</category>
        
        <category>Machine Lerning</category>
        
        <category>機械学習</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>手で持たないドローン日傘　free Parasolアサヒパワーサービスが開発</title>
        <description>&lt;p&gt;ニュースを見ていて面白いと思ったガジェットがありました。&lt;/p&gt;

&lt;p&gt;アサヒパワーサービスが手で持たないドローン日傘を開発したようです。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oICMTi1gd4A&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;説明によると&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ドローンにシートを装着したドローン傘で日差しを遮る&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;特定のマークを追尾する自動操縦仕様&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;価格は3万円程度を予定、2019年にも商用化する&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのことです。&lt;/p&gt;

&lt;p&gt;ついに自動で追従してくれる傘を使える日がくると思うと楽しみですね！&lt;/p&gt;
</description>
        <pubDate>Thu, 31 May 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/gadget/2018/05/31/asahipowerservice-drone-umbrella.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/gadget/2018/05/31/asahipowerservice-drone-umbrella.html</guid>
        
        <category>ドローン</category>
        
        <category>傘</category>
        
        <category>アサヒパワーサービス</category>
        
        
        <category>gadget</category>
        
      </item>
    
  </channel>
</rss>
