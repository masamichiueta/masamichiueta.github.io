<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masamichi Ueta</title>
    <description>エンジニアリング・デザイン・日常</description>
    <link>https://masamichi.mehttps://masamichi.me/</link>
    <atom:link href="https://masamichi.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 10 Jun 2019 22:53:53 +0900</pubDate>
    <lastBuildDate>Mon, 10 Jun 2019 22:53:53 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>macOS 10.15 Catalinaのベータバージョンを安全にインストールする方法</title>
        <description>&lt;p&gt;WWDC2019でmacOS 10.15 Catalinaが発表され、Apple Beta Software Programに参加している場合はベータバージョンのCatalinaをインストールすることができます。&lt;/p&gt;

&lt;p&gt;あくまでベータバージョンですので、メインで使用しているmacにインストールしてしまうと、普段使っているアプリが動かなくなってしまう場合もあります。&lt;/p&gt;

&lt;p&gt;Apple公式に、ベータバージョンを安全にインストールする手順が記載されていましした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.apple.com/ja-jp/HT208891&quot;&gt;個別の APFS ボリュームに macOS をインストールする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ディスクユーティリティから、新しいAPFSボリュームを追加して、そこにインストールすることで現在使っているmacOSを失うことなく、使用できます。&lt;/p&gt;

&lt;p&gt;ボリュームを追加した後、Appleの&lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;ダウンロードサイト&lt;/a&gt;から新しいOSのプロファイルをインストールして、macOS10.15 Catalinaをダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-06-10/download.png&quot; alt=&quot;Download Catalina&quot; title=&quot;Download Catalina&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードするとインストーラが立ち上がるので、インストール先を先ほど作成した方のAPFSボリュームに指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-06-10/catalina1.png&quot; alt=&quot;Catalina1&quot; title=&quot;Catalina1&quot; /&gt;
&lt;img src=&quot;/assets/posts/2019-06-10/catalina2.png&quot; alt=&quot;Catalina2&quot; title=&quot;Catalina2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;あとはインストールされるのを待つだけです。&lt;/p&gt;

&lt;p&gt;起動ディスクを変更するにはシステム環境設定のスタートアップディスクから変更することができます。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/06/10/install-macos-catalina-safely.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/06/10/install-macos-catalina-safely.html</guid>
        
        <category>macOS</category>
        
        <category>Catalina</category>
        
        <category>APFS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Interface BuilderのUI要素にベースのカスタムクラスが適用されているか検出する</title>
        <description>&lt;p&gt;Interface BuilderのUI要素にベースのカスタムクラスが適用されているか検出する方法について。&lt;/p&gt;

&lt;p&gt;アプリ開発のプロジェクトでは、スタイルガイドに沿ったベースのUIクラスを作成されている場合もあると思います。
例えばアプリのプライマリーカラーと同じ文字色のラベルやボタンなどが考えられます。Interface BuilderでUIを作成されている方は多いと思いますが、Interface Builderを使っているとそういったベースとなるUIクラスを適用し忘れがちです。
ベースとなるクラスを使えばいいのに、IB上で色やフォントを設定してしまったり、そもそもベースクラスの存在に気づかなかったりなど、どうしても起こってしまう問題かと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/IBDecodable/IBLinter&quot;&gt;IBLinter&lt;/a&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class&lt;/code&gt;ルールを使うとInterface BuilderのUI要素に指定のカスタムクラスが適用されているかをチェックすることができます。&lt;/p&gt;

&lt;p&gt;例えば全ての&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;PrimaryLabel&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;SecondaryLabel&lt;/code&gt;のどちらかのクラスを設定する必要がある場合はこの&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class&lt;/code&gt;ルールが便利です。
使い方は&lt;code class=&quot;highlighter-rouge&quot;&gt;IBLinter&lt;/code&gt;の設定ファイルである&lt;code class=&quot;highlighter-rouge&quot;&gt;.iblinter.yml&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class_rule&lt;/code&gt;を追加し、チェックしたいクラスを&lt;code class=&quot;highlighter-rouge&quot;&gt;element_class&lt;/code&gt;に、適用したいカスタムクラスの一覧を&lt;code class=&quot;highlighter-rouge&quot;&gt;base_classes&lt;/code&gt;に記述します。&lt;/p&gt;

&lt;p&gt;例えば以下のような形です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enabled_rules:
  - use_base_class
use_base_class_rule:
  - element_class: UILabel
    base_classes:
      - PrimaryLabel
      - SecondaryLabel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;IBLinter&lt;/code&gt;を実行すると、&lt;code class=&quot;highlighter-rouge&quot;&gt;PrimaryLabel&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;SecondaryLabel&lt;/code&gt;が適用されていないラベルにはXcode上でwarningが表示されるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-03-18/cover.png&quot; alt=&quot;UseBaseClass&quot; title=&quot;UseBaseClass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これでIB上でベースクラスが適用されていないUI要素を確認することができます。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトを作成したので実際に警告が表示されるのを試してみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/masamichiueta/UseBaseClassRule&quot;&gt;masamichiueta/UseBaseClassRule&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Mar 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/03/18/iblinter-use-base-class.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/03/18/iblinter-use-base-class.html</guid>
        
        <category>Interface Builder</category>
        
        <category>iOS</category>
        
        <category>Xcode</category>
        
        <category>IBLinter</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>鼻中隔湾曲症と診断されたので手術します</title>
        <description>&lt;p&gt;昔からアレルギー性鼻炎があり鼻づまりがよく起こっていました。
そのためあまり気にならなかったのですが、よく考えると右の鼻が全然通らないことに最近気づきました。&lt;/p&gt;

&lt;p&gt;それで鼻の中を見ると、右の鼻の中が腫れていて穴が全然なかったんですね。。。&lt;/p&gt;

&lt;p&gt;で、近所の耳鼻科に行ったところ鼻中隔湾曲症であると診断されました。&lt;/p&gt;

&lt;p&gt;鼻中隔湾曲症とは、左右の鼻の間にある骨の部分が曲がってしまって鼻が通りにくくなる症状です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medical.jiji.com/medical/011-0265-01&quot;&gt;鼻中隔湾曲症&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この症状を治すには手術する必要があるらしく、紹介された総合病院で近日手術することになりました。
全身麻酔で手術するらしいですが、鼻詰まりが治るということなので、決断して手術してきます。&lt;/p&gt;

&lt;p&gt;術後の経過についてはまた書いていきたいと思います。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2019/01/15/deflected-septum.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2019/01/15/deflected-septum.html</guid>
        
        <category>鼻中隔湾曲</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>2019年にネイティブアプリを開発する方法</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://medium.com/@masamichiueta/how-to-build-a-native-app-in-2019-b7f490a17846&quot;&gt;Mediumに書いた記事&lt;/a&gt;の日本語版となります。&lt;/p&gt;

&lt;p&gt;AppleがAppStoreを開始してから10年が経ちました。たくさんの人々がアプリを使っていますし、2019年もこのアプリプラットフォーム上で多くのイノヴェイションが生まれると思います。&lt;/p&gt;

&lt;p&gt;これまで様々なプラットフォームで色々なフレームワークを使ってアプリを開発してきました。今はSwiftでiOSアプリを開発していますが、過去にはWindowsアプリを開発していたり、ReactやVueといったフレームワークでWebアプリを開発したり、ReactNativeやFlutterでマルチプラットフォーム向けのネイティブアプリを開発したりしました。過去数年の間に、色々なツールが出てきては消えていきましたが、2019年にアプリを開発するとしたら以下の3つかなと思っています。&lt;/p&gt;

&lt;h2 id=&quot;1-ネイティブ言語ネイティブプラットフォーム&quot;&gt;1. ネイティブ言語、ネイティブプラットフォーム&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/swift.jpeg&quot; alt=&quot;Swift&quot; title=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOSだと、Swift(かObjective-C)、Xcode、UIKitです。&lt;/p&gt;

&lt;p&gt;Androidだと、Kotlin(かJava)、AndroidStudio(か他のIDE)、Android SDKです。&lt;/p&gt;

&lt;p&gt;2019年でもネイティブアプリを開発するにはこれが一番シンプルな手段だと思います。&lt;/p&gt;

&lt;p&gt;ツールやSDKや開発言語は公式でサポートされていて、それぞれ統合されていますし、最新のAPIを使ったりするのももちろん簡単にできます。フレームワークのバージョンを管理する手間や、よくわからないエラーに悩まされることもありません。それにデバイスに最適化されたUXを開発することにフォーカスすることができます。&lt;/p&gt;

&lt;p&gt;ただ、ずっと言われているように、iOS,Androidの両方のプラットフォームそれぞれにアプリを開発する必要があります。&lt;/p&gt;

&lt;h2 id=&quot;2-react-native&quot;&gt;2. React Native&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/react.png&quot; alt=&quot;React&quot; title=&quot;React&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React NativeはiOS, Androidのマルチプラットフォームに対してネイティブアプリを開発できるFacebook製のフレームワークです。&lt;/p&gt;

&lt;p&gt;React NativeはReactと同じコーディングスタイルなので、JavaScriptやReactをよく知っているWeb開発者のかたは取り組みやすいと思います。Reactを知らない場合は、まずReactを学ぶ必要があります。&lt;/p&gt;

&lt;p&gt;Reactで有名なアーキテクチャはReduxのようなFluxアーキテクチャで、スケーラブルなアーキテクチャでアプリを開発していきたい場合には、アーキテクチャやライブラリについても学ぶ必要があります。その分時間はかかります。&lt;/p&gt;

&lt;h2 id=&quot;3-flutter&quot;&gt;3. Flutter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/flutter.png&quot; alt=&quot;Flutter&quot; title=&quot;Flutter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FlutterはiOS, Androidのマルチプラットフォームに対してネイティブアプリを開発できるGoogle製のフレームワークです。ネイティブアプリだけでなくWebアプリも開発できるようです。&lt;/p&gt;

&lt;p&gt;Flutterは2018年に多くの開発者に注目されたと思います。私も去年Flutterでアプリを開発しました。&lt;/p&gt;

&lt;p&gt;FlutterのコーディングスタイルはReactに似ていて、コンポーネントベースのUI（Flutterではウィジェットと言います）、ホットリロード、マルチプラットフォームなどが特徴です。&lt;/p&gt;

&lt;p&gt;が、Flutterのもっとも特徴的な点はDartを開発言語として採用している点だと思います。（Go言語ではなく&lt;/p&gt;

&lt;p&gt;Flutterでアプリを開発するまではDartは書いたことがありませんでしたが、C#、Java、JavaScriptなどの経験があればDartを書くのは難しいことではないと思います。&lt;/p&gt;

&lt;p&gt;Flutterはマテリアルデザインのスキャフフォールディング（テンプレート機能のようなもの）があるので、マテリアルデザインのアプリを作りやすくなっています。2019年新しいアプリを開発するならFlutterは考慮する価値があると思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、2019年にネイティブアプリを開発するオススメの方法を3つ紹介してみました。&lt;/p&gt;

&lt;p&gt;私としては長期的な視点で開発する場合には、やはり &lt;strong&gt;1. ネイティブ言語、ネイティブプラットフォーム&lt;/strong&gt;がいいかなと思います。React NativeやFlutterはプロトタイピングに向いていると思っています。というのも、すぐに綺麗なアプリを作ることはできますが、スケーラブルなアーキテクチャ設計にするのはなかなか難しいのではと思うのと、最新のAPIに追従していくのが難しいと思うからです。&lt;/p&gt;

&lt;p&gt;ただ、開発者として開発していて楽しいものを選ぶことが大事だと思います。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/01/05/build-a-native-app-in-2019.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/01/05/build-a-native-app-in-2019.html</guid>
        
        <category>アプリ開発</category>
        
        <category>Swift</category>
        
        <category>React Native</category>
        
        <category>Flutter</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>CryptoZombiesというサービスでイーサリアムを使ったdApps開発を勉強し始めました</title>
        <description>&lt;p&gt;そろそろdApps開発についても勉強しないといけないなと思いながらなかなかできていなかったのですが、年末で時間が取れたので &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; というサービスでイーサリアムを使ったdApps開発について勉強しています。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; はdApps開発が学べるWebサービスで、CryptoZombiesというdAppsを題材にしながら実際にコードを書いてdApps開発を学ぶことができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cryptozombies.io&quot;&gt;https://cryptozombies.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現在は3つのコースが用意されており、その中でも &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; というイーサリアム上でスマートコントラクトを実装できるプログラミング言語のコースを実施してみました。&lt;/p&gt;

&lt;p&gt;現在はレッスン6まで公開されていて、スマートコントラクトの開発部分と、実際にそれをフロントからJavaScriptで呼び出す部分を学ぶことができます。&lt;/p&gt;

&lt;h2 id=&quot;学べたこと&quot;&gt;学べたこと&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;プログラミング言語 &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; の基本&lt;/li&gt;
  &lt;li&gt;dApps開発の流れ&lt;/li&gt;
  &lt;li&gt;フロントとの連携方法&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-プログラミング言語-solidity-の基本&quot;&gt;1. プログラミング言語 Solidity の基本&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; の基本的な部分から説明してくれているので、言語自体を学習しながら進めていくことができました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; 自体は難しくないと思いました、少なくとも他の言語の経験があればすぐに理解できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; のページの記述にもあるように、静的型付け言語で、コントラクト指向プログラミング言語です。他の言語と違うのはこのコントラクトという部分だと思います。いわゆる他の言語での&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;にあたるものが&lt;code class=&quot;highlighter-rouge&quot;&gt;contract&lt;/code&gt;になっています。&lt;/p&gt;

&lt;p&gt;あとは、&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;などなどお馴染みの機能もあれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;modifier&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;構文など割と独特なものも紹介されています。&lt;/p&gt;

&lt;h3 id=&quot;2-dapps開発の流れ&quot;&gt;2. dApps開発の流れ&lt;/h3&gt;

&lt;p&gt;dApps開発と言っても最初は何を指すのかあまりわかっていませんでしたが、イーサリアムを用いたdApps開発ではこの &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; で書かれた各種コントラクトをコンパイルして、イーサリアム上にデプロイすることでそのコントラクトを利用できるようになります。そしてそれをWebアプリやスマホアプリなどクライアントから呼び出すことでアプリを開発していきます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptZombies&lt;/code&gt; では2018年12月31日時点では、コントラクトをコンパイルしてイーサリアムにデプロイする部分のチュートリアルはありませんが、もうすぐ追加されるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://infura.io&quot;&gt;INFURA&lt;/a&gt; というサービスが紹介されていて、このサービスを使うとイーサリアムのノードを立てることなくコントラクトをデプロイできるようです。&lt;/p&gt;

&lt;h3 id=&quot;3-フロントとの連携方法&quot;&gt;3. フロントとの連携方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; から実装したコントラクトを呼び出す方法が説明されています。web3.jsというイーサリアムのJavaScriptライブラリを使用することで、実装したコントラクトを簡単に呼び出すことができます。&lt;/p&gt;

&lt;p&gt;このAPIを使って普通にWebアプリを作ると、dAppsとしてWebアプリを開発できるというわけですね。&lt;/p&gt;

&lt;p&gt;CryptoZombiesをやっていて面白かったのが、ゾンビに食べさせる餌として、同じくイーサリアムのコントラクト上で開発されているCryptoKittiesのネコを与えることができるとうい点でした。&lt;/p&gt;

&lt;p&gt;つまり同じブロックチェーン上にあるデータなので、公開されているAPIを使えば違うゲーム同士でもデータをやりとりできるということですね。&lt;/p&gt;

&lt;p&gt;まだまだ理解が浅いのでこれからも研究していこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt;をひたすら進めていく動画をアップしたのでよければみてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLCwKASeEZrUvXfSoOTE5eud4F7oBYX0H7&quot;&gt;CryptoZombies at Youtube&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/cryptocurrency/2018/12/31/start-etherium-with-crypto-zombies.html</link>
        <guid isPermaLink="true">https://masamichi.me/cryptocurrency/2018/12/31/start-etherium-with-crypto-zombies.html</guid>
        
        <category>イーサリアム</category>
        
        <category>CryptoZombies</category>
        
        <category>Etherium</category>
        
        <category>dApps</category>
        
        <category>SmartContract</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>はまりんフェスタ2018にいってきました</title>
        <description>&lt;p&gt;はまりんフェスタ2018にいってきました。
今年は、横浜市交通局川和車両基地で開催されました。&lt;/p&gt;

&lt;p&gt;横浜から、ブルーラインとグリーンラインに乗って、川和町駅で下車し会場に向かいました。&lt;/p&gt;

&lt;p&gt;会場では、グリーンラインの車両が展示してあったり特別車両の乗車券も売っていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa1.jpeg&quot; alt=&quot;展示&quot; title=&quot;展示&quot; /&gt;
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa2.jpeg&quot; alt=&quot;展示&quot; title=&quot;展示&quot; /&gt;
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa3.jpeg&quot; alt=&quot;チケット&quot; title=&quot;チケット&quot; /&gt;&lt;/p&gt;

&lt;p&gt;特別車両に乗りましたが、乗ったまま電車の洗車機に入れるという貴重な体験ができました。&lt;/p&gt;

&lt;p&gt;室内の展示では、Nゲージの操作体験やミニブルーライン・グリーンラインの乗車体験がありました。
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa4.jpeg&quot; alt=&quot;Nゲージ&quot; title=&quot;NNゲージ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後は、午前中に並んで整理券をゲットした運転体験でした。本物の電車の運転席に座って、運転を体験することができるので、息子も喜んでいました。
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa5.jpeg&quot; alt=&quot;運転体験&quot; title=&quot;運転体験&quot; /&gt;&lt;/p&gt;

&lt;p&gt;展示のクオリティが高くて非常に楽しめるイベントでした。
来年も参加したいと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Nov 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2018/11/11/hamarin-festa-2018.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2018/11/11/hamarin-festa-2018.html</guid>
        
        <category>はまりん</category>
        
        <category>はまりんフェスタ</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>横浜マラソン2018に参加しました</title>
        <description>&lt;p&gt;2018年10月28日に横浜で開催された横浜マラソン2018に参加しました。&lt;/p&gt;

&lt;p&gt;人生で初めてのフルマラソンでした。
結果は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グロスタイム: 4:54:31&lt;/li&gt;
  &lt;li&gt;ネットタイム: 4:44:07&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でした。&lt;/p&gt;

&lt;p&gt;初めてにしては結構よかったかなと思います。&lt;/p&gt;

&lt;p&gt;22kmを超えたあたりから足が痛くなってきて、そこからは体力というより痛みとの戦いでした。&lt;/p&gt;

&lt;p&gt;こういう大きな大会だと、給水所もしっかり設置されていてとても有り難いです。色々なものが配られていて、次の給水所が楽しみでした。
また、給水所や路上での応援は、本当にありがたくてなぜか体が少し軽くなって走ることができました。&lt;/p&gt;

&lt;p&gt;無事完走メダルももらうことができました。これをきっかけにマラソンにはまってしまいそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-11-07/yokohama-marathon1.jpeg&quot; alt=&quot;横浜マラソン1&quot; title=&quot;横浜マラソン1&quot; /&gt;
&lt;img src=&quot;/assets/posts/2018-11-07/yokohama-marathon2.jpeg&quot; alt=&quot;横浜マラソン2&quot; title=&quot;横浜マラソン2&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/hobby/2018/11/07/yokohama-marathon-2018.html</link>
        <guid isPermaLink="true">https://masamichi.me/hobby/2018/11/07/yokohama-marathon-2018.html</guid>
        
        <category>横浜マラソン</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>FlutterでiOS12のデバイスにアプリをインストールすると日本語が明朝体になる</title>
        <description>&lt;p&gt;FlutterでiOS12のデバイスにアプリをインストールすると日本語が明朝体になってしまいます。&lt;/p&gt;

&lt;p&gt;Flutterのバージョンは、&lt;code class=&quot;highlighter-rouge&quot;&gt;Channel beta, v0.9.4&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-10-15/mincho.png&quot; alt=&quot;Flutterの日本語が明朝体になる&quot; title=&quot;Flutterの日本語が明朝体になる&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flutterの修正でそのうち直ると思います(&lt;a href=&quot;https://github.com/flutter/flutter/issues/21667&quot;&gt;Japanese default font family is incorrect on iOS 12&lt;/a&gt;)が、テーマにヒラギノフォントを指定することで、修正することができます。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/masamichiueta/a2906d96e568031d8b455575e324b1dc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-10-15/hiragino.png&quot; alt=&quot;Flutterでヒラギノを使う&quot; title=&quot;Flutterでヒラギノを使う&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Oct 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2018/10/15/resolve-flutter-japanese-font-problem.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2018/10/15/resolve-flutter-japanese-font-problem.html</guid>
        
        <category>Flutter</category>
        
        <category>iOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>App Store ConnectにアプリをアップロードしたらToo many symbol filesと怒られた</title>
        <description>&lt;p&gt;App Store ConnectにXcodeからアプリをアップロードすると、少し時間がたってからメールが届きました。&lt;/p&gt;

&lt;p&gt;そのメールはアプリに問題が見つかりましたという題名で、&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Too many symbol files&lt;/code&gt; というエラーが書かれていました。&lt;/p&gt;

&lt;p&gt;iOS11からは32bitアプリのサポートが切られたことが影響している為でしょうか。
調べたところ、どうやらcocoapodsが生成しているフレームワークのアーキテクチャの設定ぽいということがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/7111&quot;&gt;CocoaPods leaves dSYMs for unused architectures in archive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アプリの&lt;code class=&quot;highlighter-rouge&quot;&gt;valid architecture&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt;にすれば、64ビットになって解決するようです。&lt;/p&gt;

&lt;p&gt;64ビットにする方法はこちらが参考になりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/Yasunobu/items/59c89facfcbb36bdedda&quot;&gt;【iOS】iPhoneアプリを64bit端末のみをターゲットにする方法&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2018/08/19/too-many-symbol-files.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2018/08/19/too-many-symbol-files.html</guid>
        
        <category>App Store Connect</category>
        
        <category>iOS</category>
        
        <category>cocoapods</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>元19, 3B LAB.☆Sの岡平健治さんがYoutuberに。Mutuber KENJIのMusicTV配信が始まりました</title>
        <description>&lt;p&gt;元19, 3B LAB.☆Sの岡平健治さんがYoutuberとして活動開始されました。
チャンネルはMutuber KENJIのMusicTV。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCpqKhYHtt9ueacox1yxjB_Q?app=desktop&amp;amp;spfreload=10&quot;&gt;Mutuber KENJIのMusicTV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記念すべき第1回目は、19の名曲「熊じいちゃん」を歌われています。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZXYrBGALr34&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;毎週水曜日に更新されるようなので、要チェックです！&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/hobby/2018/08/17/mutuber-okahirakenji.html</link>
        <guid isPermaLink="true">https://masamichi.me/hobby/2018/08/17/mutuber-okahirakenji.html</guid>
        
        <category>岡平健治</category>
        
        <category>19</category>
        
        <category>ジューク</category>
        
        <category>3B Lab</category>
        
        
        <category>hobby</category>
        
      </item>
    
  </channel>
</rss>
