<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>micchyboy</title>
    <description>ソフトウェアエンジニアリング・デザイン・日常について投稿するブログ。開発系はSwift, iOSが中心。仮想通貨、お出かけ、ガジェットなども。</description>
    <link>https://micchyboy1023.github.iohttps://micchyboy1023.github.io/</link>
    <atom:link href="https://micchyboy1023.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Jun 2018 10:33:53 +0900</pubDate>
    <lastBuildDate>Wed, 13 Jun 2018 10:33:53 +0900</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>What's new in ARKit 2 ~ ARKit2の新機能</title>
        <description>&lt;p&gt;WWDC2018で発表されたARKit2に関するセッションのビデオ &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/602/&quot;&gt;What’s New in ARKit 2&lt;/a&gt;のメモです。&lt;/p&gt;

&lt;h1 id=&quot;arkit2の新機能&quot;&gt;ARKit2の新機能&lt;/h1&gt;

&lt;p&gt;ざっくり書くと以下の点が新機能として紹介されていました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ワールドマップの共有が可能になった&lt;/li&gt;
  &lt;li&gt;画像のトラッキングが可能になった&lt;/li&gt;
  &lt;li&gt;オブジェクトのテクスチャへの環境情報の反映（Environment Texturing、反射など）が可能になった&lt;/li&gt;
  &lt;li&gt;リアルな物体の認識、スキャンが可能に&lt;/li&gt;
  &lt;li&gt;フェイストラッキングの向上、視線追跡、舌の認識が可能になった&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ARKit2ではマップのrelocalizationが追加されて、worldmapの保存、共有が可能に。これは便利だ&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1006324724211728385?ref_src=twsrc%5Etfw&quot;&gt;2018年6月11日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ARKit2、ローカルでワールドマップのファイルシェアできるのか。単にファイルをAppGroupでシェアしてる感じかな&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1006326931149631488?ref_src=twsrc%5Etfw&quot;&gt;2018年6月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Environment Texturingで反射のような環境情報を反映可能に&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1006329003722993665?ref_src=twsrc%5Etfw&quot;&gt;2018年6月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ARKit2には画像追跡機能も追加。APIも使いやすそう&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1006428141441568769?ref_src=twsrc%5Etfw&quot;&gt;2018年6月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;FaceTrackingも強化。視線の追跡が可能に。舌の検出も可能。&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1006439704978313217?ref_src=twsrc%5Etfw&quot;&gt;2018年6月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;キーノートやセッションビデオで紹介されていますが、一番大きな点としては、&lt;strong&gt;複数人でワールドマップの共有が可能になった&lt;/strong&gt;ことかと思います。&lt;/p&gt;

&lt;p&gt;これによって、複数のデバイスで同じ位置にあるオブジェクトを見ることができるようになったり、キーノートの発表でもあった&lt;code class=&quot;highlighter-rouge&quot;&gt;SwiftShot&lt;/code&gt;のように複数人で遊べるARアプリを簡単に作れるようになりました。&lt;/p&gt;

&lt;p&gt;Environment Texturingも、&lt;code class=&quot;highlighter-rouge&quot;&gt;ARWorldTrackingConfiguration&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;environmentTexturing&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;.automatic&lt;/code&gt;にするだけで良いので非常に簡単に適用できて素晴らしいと思います。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Environment Texturing&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Create world tracking configuration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARWorldTrackingConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Enable automatic environment texturing &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environmentTexturing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;automatic&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Run the configuration&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;正式リリースされたら、アプリを作ってみる予定です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/arkit/swiftshot_creating_a_game_for_augmented_reality&quot;&gt;SwiftShot&lt;/a&gt;についてもソースを読んでみます。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/13/whats-new-in-arkit2.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/13/whats-new-in-arkit2.html</guid>
        
        <category>ARKit</category>
        
        <category>AR</category>
        
        <category>Apple</category>
        
        <category>WWDC</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>XRPペーパーウォレットの作り方</title>
        <description>&lt;h1 id=&quot;xrpウォレットの作り方&quot;&gt;XRPウォレットの作り方&lt;/h1&gt;

&lt;p&gt;XRPのウォレットを作る方法を紹介します。&lt;/p&gt;

&lt;p&gt;今回作成するのは、ペーパーウォレットです。&lt;/p&gt;

&lt;p&gt;ペーパーウォレットとは、ウォレットのアドレスと秘密鍵を紙に印刷して保管するウォレットです。&lt;/p&gt;

&lt;p&gt;紙ではなくて、例えば秘密鍵をUSBファイルに保存して、インターネットに接続されていない安全な場所に保管しておいても大丈夫でしょう。&lt;/p&gt;

&lt;p&gt;では早速作成していきましょう。&lt;/p&gt;

&lt;h1 id=&quot;ツールをダウンロードする&quot;&gt;ツールをダウンロードする&lt;/h1&gt;

&lt;p&gt;今回は、Octillionという会社が提供している、&lt;code class=&quot;highlighter-rouge&quot;&gt;generate-ripple-wallet&lt;/code&gt;というツールを使います。&lt;/p&gt;

&lt;p&gt;[generate-ripple-wallet](https://github.com/OctillionSA/generate-ripple-wallet)&lt;/p&gt;

&lt;p&gt;上のページにアクセスして、ファイルをダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-11/download.png&quot; alt=&quot;Download&quot; title=&quot;Download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ファイルをダウンロードしなくても、Web上に提供されているアプリを使用すればウォレットを生成できるのですが、インターネットに繋がれたところで生成するのもセキュリティ的に微妙なので、オフラインで作成するためにダウンロードします。&lt;/p&gt;

&lt;h1 id=&quot;ツールを開く&quot;&gt;ツールを開く&lt;/h1&gt;

&lt;p&gt;ダウンロードしたら、zipを回答して、&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;を開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-11/html.png&quot; alt=&quot;html&quot; title=&quot;html&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;を開くと、以下のような画面が表示されるので、右下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Generate&lt;/code&gt;ボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-11/generate-ripple-wallet.png&quot; alt=&quot;generate-ripple-wallet&quot; title=&quot;generate-ripple-wallet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;すると、Ripple addressにウォレットのアドレスが、Ripple secretに秘密鍵が表示されます。&lt;/p&gt;

&lt;p&gt;ここで生成された秘密鍵は、紙に書いて安全な場所に保管するか、USBメモリにテキストファイルとして保存して安全な場所に保管してください。&lt;/p&gt;

&lt;h1 id=&quot;ウォレットのアクティベーション&quot;&gt;ウォレットのアクティベーション&lt;/h1&gt;

&lt;p&gt;以上でウォレットは作成できましたが、XRPのウォレットを使えるようにするには、&lt;strong&gt;ウォレットに20XRP以上を送金してウォレットをアクティベートする必要があります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;20XRPはウォレットを使うための手数料のようなもので、ウォレットに送られた20XRPは、送金することはできません。&lt;/p&gt;

&lt;p&gt;生成したアドレスに20XRP以上を送金してウォレットの生成は完了となります。&lt;/p&gt;

&lt;p&gt;簡単ですね！&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/cryptocurrency/2018/06/11/how-to-create-xrp-wallet.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/cryptocurrency/2018/06/11/how-to-create-xrp-wallet.html</guid>
        
        <category>XRP</category>
        
        <category>Ripple</category>
        
        <category>リップル</category>
        
        <category>ウォレット</category>
        
        <category>ペーパーウォレット</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>スマートコントラクトプラットフォームCodiusでReactアプリを実行してみた</title>
        <description>&lt;p&gt;元ネタはこちら
&lt;a href=&quot;https://medium.com/codius/running-a-simple-react-app-on-the-codius-smart-contract-platform-7ddefce8cb06&quot;&gt;Running a simple React app on the Codius smart contract platform&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;codiusとは&quot;&gt;Codiusとは&lt;/h1&gt;

&lt;p&gt;Codiusとは、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ripple Labsにより開発が始まり2015年6月に打ち切りとなっていた、Ripple(XRP)に対応したスマートコントラクト
らしいです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://crypto-times.jp/xrp_smartcontract_revive/&quot;&gt;Ripple Labsによって開発されたスマートコントラクトのプロトコル Codiusが復活&lt;/a&gt;から引用。&lt;/p&gt;

&lt;p&gt;公式サイトでは、以下のように書かれています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Codius is an open hosting protocol. It makes it very easy to upload a program, whether you want it to run on one host or thousands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Codiusはオープンなホスティングプロトコルです。Coidusを使うと、ホスティング先の数に関わらずプログラムのホスティングが非常に簡単になります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、中央集権的に1つのサーバーでプログラムをホスティングするのではなく、非中央集権的にあらゆる環境でホスティングできますよということですね。&lt;/p&gt;

&lt;h1 id=&quot;codiusのセットアップ&quot;&gt;Codiusのセットアップ&lt;/h1&gt;

&lt;p&gt;Codiusはオープンソースで、開発者用ツールもすぐにインストールすることができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/codius&quot;&gt;codius&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codius&lt;/code&gt;をインストールするには、以下の3つが必要です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NodeJS version8.9.4以上&lt;/li&gt;
  &lt;li&gt;XRPウォレット&lt;/li&gt;
  &lt;li&gt;Moneyd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Codiusを実行するには、先に&lt;code class=&quot;highlighter-rouge&quot;&gt;Moneyd&lt;/code&gt;を実行する必要があるようです。&lt;/p&gt;

&lt;p&gt;こちらの記事&lt;a href=&quot;https://medium.com/interledger-blog/joining-the-live-ilp-network-eab123a73665&quot;&gt;Joining the Live ILP Network&lt;/a&gt;を参考に&lt;code class=&quot;highlighter-rouge&quot;&gt;Moneyd&lt;/code&gt;の実行していきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moneydをライブ環境で実行するにあたり、35XRP以上入ったウォレットが必要です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;今回は開発用のテスト環境で行ってみます。&lt;/p&gt;

&lt;h2 id=&quot;moneydの実行&quot;&gt;Moneydの実行&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g moneyd moneyd-uplink-xrp
moneyd xrp:configure
moneyd xrp:start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;xrp:configureの際にはXRPの秘密鍵を入力します。&lt;/p&gt;

&lt;p&gt;これで、ILPネットワークに接続できました。&lt;/p&gt;

&lt;h2 id=&quot;codiusの実行&quot;&gt;Codiusの実行&lt;/h2&gt;

&lt;h3 id=&quot;manifestの作成&quot;&gt;Manifestの作成&lt;/h3&gt;

&lt;p&gt;Codiusを実行するには、Manifestを作成する必要があるようです。今回は、CodisuのサンプルからReactアプリを動かすManifestを使ってみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/codius/examples&quot;&gt;codius/examples&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;manifest&quot;: {
    &quot;name&quot;: &quot;my-codius-create-react-app&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;machine&quot;: &quot;small&quot;,
    &quot;port&quot;: &quot;3000&quot;,
    &quot;containers&quot;: [{
      &quot;id&quot;: &quot;app&quot;,
      &quot;image&quot;: &quot;androswong418/example-pod-1@sha256:8933bced1637e7d3b08c4aa50b96a45aef0b63f504f595bb890f57253af68b11&quot;
    }]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを、&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app-manifest.json&lt;/code&gt;というファイルで保存します。
このDockerコンテナは、Facebookの&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;のイメージのようです。&lt;/p&gt;

&lt;h3 id=&quot;manifestのアップロード&quot;&gt;Manifestのアップロード&lt;/h3&gt;

&lt;p&gt;Manifestを作成したら、&lt;code class=&quot;highlighter-rouge&quot;&gt;codius&lt;/code&gt;のコマンドを使用してManifestをアップロードします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codius upload ./create-react-app-manifest.json --duration 200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;アップロードが完了すると、以下のようなメッセージが表示されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Successfully Uploaded Pods to:
{ 
  url:  'http://hogehoge.local.codius.org:3000/',
 manifestHash: 'hogehoge',
  host: 'hogehoge',
  expiry: 'xxxx-xx-xxTxx:xx:xx.xxxZ',
  expirationDate: 'xx-xx-xxxx xx:xx:xx -0700',
  expires: 'in 2 minutes',
  pricePaid: 'xxx' 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;に表示されたURLにアクセスすると、Reactアプリが実行されています！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-10/cover.png&quot; alt=&quot;React on Codius&quot; title=&quot;React on Codius&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/cryptocurrency/2018/06/10/ripple-codius-trial.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/cryptocurrency/2018/06/10/ripple-codius-trial.html</guid>
        
        <category>Codius</category>
        
        <category>Ripple</category>
        
        <category>XRP</category>
        
        <category>React</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>よこすかYYのりものフェスタ2018に行ってきました</title>
        <description>&lt;h1 id=&quot;よこすかyyのりものフェスタ2018に行ってきました&quot;&gt;よこすかYYのりものフェスタ2018に行ってきました&lt;/h1&gt;

&lt;p&gt;横須賀駅で6月9日~6月10日に開催されている「よこすかYYのりものフェスタ2018」に行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cocoyoko.net/event/norimono-fes.html&quot;&gt;よこすかYYのりものフェスタ2018&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Webサイトから抜粋&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;鉄道や自動車、海上自衛隊の艦艇など、さまざまな分野の「のりもの」が横須賀に大集合！子ども向け制服記念撮影やミニ鉄道、よこすかグルメの出店もあり、家族みんなで楽しめるイベントです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで横須賀駅を降りると、いきなりプラレールが展示されていました。
JR東日本展示には作業車両の展示も。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/zKQb3NXArs&quot;&gt;pic.twitter.com/zKQb3NXArs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005278885880008704?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;11時30分くらいには、横須賀駅の2番線に黒船電車がきて、車内でご飯を食べたりできました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;黒船電車&lt;br /&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/eNOrAYKEoU&quot;&gt;pic.twitter.com/eNOrAYKEoU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005297508078108672?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;黒船電車はゆったりしていて、よかったですね〜。&lt;/p&gt;

&lt;p&gt;そのあとは、自衛隊の方の展示に行って、試験艦あすかとヘリコプターの展示をみてきました。&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/ClgrwUEWMg&quot;&gt;pic.twitter.com/ClgrwUEWMg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005335778350718976?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;よこすかYYのりものフェスタ &lt;a href=&quot;https://t.co/sYKi2Bui4b&quot;&gt;pic.twitter.com/sYKi2Bui4b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masamichi Ueta (@micchyboy1023) &lt;a href=&quot;https://twitter.com/micchyboy1023/status/1005335898962006016?ref_src=twsrc%5Etfw&quot;&gt;2018年6月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;無料でこれだけ楽しめるのは、なかなかないイベントだと思います！&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/family/2018/06/09/yokosukayynorimonofesta2018.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/family/2018/06/09/yokosukayynorimonofesta2018.html</guid>
        
        <category>よこすかYYのりものフェスタ</category>
        
        <category>横須賀</category>
        
        <category>黒船電車</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>Swift4.2ではEnumを一覧で取得できるようになった</title>
        <description>&lt;h1 id=&quot;swift42ではenumを一覧で取得できるようになった&quot;&gt;Swift4.2ではEnumを一覧で取得できるようになった&lt;/h1&gt;

&lt;p&gt;WWDC2018の&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/401/&quot;&gt;What’s new in Swift&lt;/a&gt;でSwift4.2のアップデートが発表されていました。&lt;/p&gt;

&lt;p&gt;Swift4.2では、&lt;code class=&quot;highlighter-rouge&quot;&gt;CaseIterable&lt;/code&gt; プロトコルをEnumに指定することで、&lt;code class=&quot;highlighter-rouge&quot;&gt;allCases&lt;/code&gt;というプロパティが使用できるようになり、Enumの一覧を取得できるようになったようです。&lt;/p&gt;

&lt;p&gt;Swift Evolutionはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md&quot;&gt;Derived Collection of Enum Cases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enumの一覧をループで回すのは、結構やりたい時があって、ビデオのようにEnumの全ケースを入れたArrayを定義するということをやることがありましたが、これは便利ですね。&lt;/p&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CaseIterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trot&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gallop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jog&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Fri, 08 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/08/whats-new-swift42.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/08/whats-new-swift42.html</guid>
        
        <category>Swift</category>
        
        <category>Enum</category>
        
        <category>iOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>WWDC2018で発表された機械学習モデル生成フレームワーク Create MLについて</title>
        <description>&lt;h1 id=&quot;create-ml&quot;&gt;Create ML&lt;/h1&gt;

&lt;p&gt;WWDC2018で、機械学習モデルをmacOS Mojave上で簡単に作成することができるフレームワーク &lt;code class=&quot;highlighter-rouge&quot;&gt;Create ML&lt;/code&gt;が発表されました。&lt;/p&gt;

&lt;p&gt;セッションのビデオはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/703/&quot;&gt;Introducing Create ML&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;何ができる&quot;&gt;何ができる？&lt;/h2&gt;

&lt;p&gt;セッションのビデオでは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画像の分類&lt;/li&gt;
  &lt;li&gt;テキストの判定&lt;/li&gt;
  &lt;li&gt;テーブルデータ(csvなど）によるデータの推測&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のモデル作成と実際の分類のデモが行われていました。&lt;/p&gt;

&lt;h2 id=&quot;画像認識用学習モデルの作成&quot;&gt;画像認識用学習モデルの作成&lt;/h2&gt;

&lt;h3 id=&quot;transfer-learning&quot;&gt;Transfer Learning&lt;/h3&gt;

&lt;p&gt;注目はTransfer Learningというところで、Appleが事前に学習させたモデルを利用することで、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;モデルサイズの縮小&lt;/li&gt;
  &lt;li&gt;モデル作成時間の短縮&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が可能になったようです。&lt;/p&gt;

&lt;p&gt;また、Playground上でモデルを作成するデモもありました。
画像のファイルをフォルダごと突っ込むことで学習させていましたが、ファイル名やフォルダ名がラベルになるようですね。&lt;/p&gt;

&lt;h3 id=&quot;モデルの作り方&quot;&gt;モデルの作り方&lt;/h3&gt;

&lt;p&gt;デモでは以下のようなSwiftスクリプトでモデルが作成されていました。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#!/usr/bin/swift&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreateML&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Specify Data&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trainDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/Fruits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/TestFruits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLImageClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trainingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labeledDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Evaluate Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;evaluation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labeledDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Save Model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/createml/Desktop/FruitClassifier.mlmodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ swift fruitClassifier.swift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上のような形で、モデルが作成できるようです。&lt;/p&gt;

&lt;h2 id=&quot;テキストのラベリング&quot;&gt;テキストのラベリング&lt;/h2&gt;

&lt;p&gt;セッションのデモでは、ユーザーが入力したテキストから、そのテキストがネガティブかポジティブかを判定するデモがありました。
SNS系のアプリで、コメントを制御する時に便利そうですね！&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/07/create-ml-wwdc2018.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/07/create-ml-wwdc2018.html</guid>
        
        <category>WWDC2018</category>
        
        <category>WWDC</category>
        
        <category>CreateML</category>
        
        <category>人工知能</category>
        
        <category>機械学習</category>
        
        <category>マシーンラーニング</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>ffmpegを使ってmovファイルをgifに変換する</title>
        <description>&lt;h1 id=&quot;movをgifに変換する&quot;&gt;movをgifに変換する&lt;/h1&gt;

&lt;p&gt;アプリの開発で、スクリーンを動画でキャプチャしてgifにして貼り付けるということをよく行うと思いますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;を使用すると簡単にmovをgifに変更できました。&lt;/p&gt;

&lt;p&gt;まずffmpegをインストールします&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストールするとffmpegが使用できるようになるので、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i [input file].mov -r [frame rate] [output file].gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i screen.mov -r 24 screen.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにうつと、ffmpegがmovをgifに変換してくれます。&lt;/p&gt;

&lt;p&gt;ffmpegの使い方はこちらのページが参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.ckme.co.jp/ffmpeg_basic.shtml&quot;&gt;ffmpegの最も基本的な使い方&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/06/mov-to-gif-with-ffmpeg.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/06/mov-to-gif-with-ffmpeg.html</guid>
        
        <category>ffmpeg</category>
        
        <category>mov</category>
        
        <category>gif</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>WWDC2018キーノートまとめ</title>
        <description>&lt;h1 id=&quot;wwdc2018-キーノートまとめ&quot;&gt;WWDC2018 キーノートまとめ&lt;/h1&gt;

&lt;h2 id=&quot;ios-12&quot;&gt;iOS 12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;パフォーマンスの向上&lt;/li&gt;
  &lt;li&gt;ARKit2 マルチユーザーに対応&lt;/li&gt;
  &lt;li&gt;Measureアプリが追加、ARでもののサイズを測れる&lt;/li&gt;
  &lt;li&gt;Siriが色々アップデート&lt;/li&gt;
  &lt;li&gt;株価、ニュース、ボイスメモアプリのリデザイン&lt;/li&gt;
  &lt;li&gt;iBooksがApple Bookに変更、リデザイン&lt;/li&gt;
  &lt;li&gt;通知のグループ化が可能になった&lt;/li&gt;
  &lt;li&gt;どれくらいiPhoneを使用しているかがわかるようになった、アプリごとの使用時間を決めて制限することも可能&lt;/li&gt;
  &lt;li&gt;Animojiにキャラが追加&lt;/li&gt;
  &lt;li&gt;MeMojiで自分の顔文字を追加することができるように&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watchos-5&quot;&gt;watchOS 5&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ヨガやハイキングなど新しいアクティビティの追加&lt;/li&gt;
  &lt;li&gt;ウォッチ同士でトランシーバーが可能に&lt;/li&gt;
  &lt;li&gt;通知が強化&lt;/li&gt;
  &lt;li&gt;ウェブビューが表示できるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tvos-12&quot;&gt;tvOS 12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;音がよくなった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macos-1014-mojaveモハーヴェ&quot;&gt;macOS 10.14 Mojave（モハーヴェ）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ダークモードが追加された&lt;/li&gt;
  &lt;li&gt;デスクトップのファイルを整理するStack&lt;/li&gt;
  &lt;li&gt;Finderの新しい表示 ギャラリービュー&lt;/li&gt;
  &lt;li&gt;News, 株価, ボイスメモ, ホームアプリが追加&lt;/li&gt;
  &lt;li&gt;CreateMLという機械学習モデル作成フレームワークが追加された&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あんまりすごい発表はなかったですかねぇ。&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 02:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/05/wwdc2018-keynote.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/05/wwdc2018-keynote.html</guid>
        
        <category>WWDC2018</category>
        
        <category>Apple</category>
        
        <category>アップル</category>
        
        <category>iOS</category>
        
        <category>macOS</category>
        
        <category>watchOS</category>
        
        <category>tvOS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>ASP.NET Coreでエラーメッセージを日本語にする方法</title>
        <description>&lt;p&gt;ASP.NET CoreでWebアプリを開発していますが、デフォルトのバリデーションの仕組みを使うとエラーメッセージが英語になってしまい困っていました。&lt;/p&gt;

&lt;p&gt;モデルクラスのプロパティに全部のパターンを日本語で書くとか途方もないことをしたくないと思っていたところ、解決する方法を見つけました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/h0ge/items/b7ffd65d0f11ac6382fd&quot;&gt;ASP.NET Coreでエラーメッセージを日本語で表示する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;元ネタはこちらの記事のようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/mvpawardprogram/2017/05/09/aspnetcore-mvc-error-message/&quot;&gt;Customization And Localization Of ASP.NET Core MVC Default Validation Error Messages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エラーメッセージはこんな感じでローカライズしました。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RequiredAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は必須項目です&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MaxLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以内で入力してください&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MinLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以上で入力してください&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EmailAddressAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}の形式が正しくありません。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CompareAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}と{1}が一致しません。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StringLengthAttribute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;{0}は{1}文字以上{2}文字以下で入力してください。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/development/2018/06/05/asp-dotnet-core-error-japanese.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/development/2018/06/05/asp-dotnet-core-error-japanese.html</guid>
        
        <category>ASP.NET Core</category>
        
        <category>C#</category>
        
        <category>ASP.NET</category>
        
        <category>ローカライズ</category>
        
        <category>日本語化</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>子育てハック　子供2人（3歳0歳）の私が子供が生まれてから買ってよかったもの</title>
        <description>&lt;h1 id=&quot;子育てハック子供2人3歳0歳の私が子供が生まれてから買ってよかったもの&quot;&gt;子育てハック　子供2人（3歳0歳）の私が子供が生まれてから買ってよかったもの&lt;/h1&gt;

&lt;p&gt;昨年年末に第2子が生まれて家がにぎやかになりました。
子供がいるとできるだけ家事の負担を下げたかったり、週末はお出かけしたかったりすると思うのですが、そのために買ってよかったなと思うものをまとめておきます。&lt;/p&gt;

&lt;h2 id=&quot;ルンバ&quot;&gt;ルンバ&lt;/h2&gt;

&lt;p&gt;まずは、ルンバです。
これまでは掃除機で掃除していましたが、日々の掃除をルンバにお願いするようにしました。&lt;/p&gt;

&lt;p&gt;私が購入したのは、ルンバ960です。&lt;/p&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01JYD3OCE&amp;amp;linkId=286a86d44a3a44445cb086a7f83864e7&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;購入したといっても、溜まっていたクレジットカードのポイントで購入しました。&lt;/p&gt;

&lt;p&gt;ルンバを導入してから、ほとんど自分で掃除することがなくなりました。流石に細かいところはルンバで掃除しきれませんが、その程度のことは毎日しなくてもよいので日々の掃除はルンバに任せることができます。&lt;/p&gt;

&lt;p&gt;ルンバのアプリで毎日の掃除時間をスケジューリングできるので、非常に便利ですね！
家の掃除から解放されることで子供や他のことで時間が使えるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micchyboy1023.github.io/assets/posts/2018-06-03/roomba.png&quot; alt=&quot;ルンバのアプリ&quot; title=&quot;ルンバのアプリ&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;テント&quot;&gt;テント&lt;/h2&gt;

&lt;p&gt;週末は子供とずっと家にいるのもよくないと思い、よく公園に出かけていますが、その際に便利なのがテントです。
公園の芝生などでお弁当を食べたりするのに、必須アイテムですね。&lt;/p&gt;

&lt;p&gt;私はAmazonのセールで、こちらのテントを購入しました。&lt;/p&gt;

&lt;p&gt;MRG ワンタッチテント 2～3人用 UPF50+ uvカットコーティング 防水加工 サンシェード テント キャリーバッグ付き&lt;/p&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01IVKXQSS&amp;amp;linkId=3d995c9af82c39cd4d92b31b34f2daa5&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;折りたたみできて広げるとなかなか広く、毎週末利用しています。&lt;/p&gt;

&lt;h2 id=&quot;お弁当箱&quot;&gt;お弁当箱&lt;/h2&gt;

&lt;p&gt;こちらも週末公園に行った時に、奥さんがお弁当を作ってくれるので必須アイテムです。
お弁当は3段のものを使っていて、子供と3人で食べています。&lt;/p&gt;

&lt;p&gt;大きめのお弁当がいいと思いますね。&lt;/p&gt;

&lt;h1 id=&quot;今後あってもいいかなと思うもの&quot;&gt;今後あってもいいかなと思うもの&lt;/h1&gt;

&lt;p&gt;食洗機があるといいなと思っています。
家事で時間がかかるのは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;洗濯&lt;/li&gt;
  &lt;li&gt;炊事&lt;/li&gt;
  &lt;li&gt;掃除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だと思うのですが、食洗機があればもっと家事の負担を減らせるなと思っています。&lt;/p&gt;

&lt;p&gt;何かおすすめがあれば、&lt;a href=&quot;https://twitter.com/micchyboy1023&quot;&gt;@micchyboy1023&lt;/a&gt;　まで教えてください。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://micchyboy1023.github.io/family/2018/06/03/goods-for-baby.html</link>
        <guid isPermaLink="true">https://micchyboy1023.github.io/family/2018/06/03/goods-for-baby.html</guid>
        
        <category>子供</category>
        
        <category>ルンバ</category>
        
        <category>ベビーカー</category>
        
        <category>子育て</category>
        
        
        <category>family</category>
        
      </item>
    
  </channel>
</rss>
