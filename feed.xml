<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masamichi Ueta</title>
    <description>エンジニアリング・デザイン・日常</description>
    <link>https://masamichi.mehttps://masamichi.me/</link>
    <atom:link href="https://masamichi.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Jun 2020 23:27:20 +0900</pubDate>
    <lastBuildDate>Fri, 12 Jun 2020 23:27:20 +0900</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>おすすめのペダルなし自転車向けキッズシューズの紹介</title>
        <description>&lt;p&gt;ストライダーのようなペダルなし自転車でも大丈夫な靴を紹介します。&lt;/p&gt;

&lt;p&gt;コロナの影響もありなかなか公園にいったりも気軽にできないので、家の前で子供が自転車をすることが多かったのですが、靴がボロボロになってしまいました。&lt;/p&gt;

&lt;p&gt;子供がペダルなし自転車に持っていますが、ブレーキするときに靴のつま先でブレーキしちゃうんですね。そうすると道路で擦れて靴がボロボロになってしまいました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-06-01/shoes.png&quot; alt=&quot;ボロボロ&quot; title=&quot;ボロボロ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この前買ったばかりの靴だったのですが、自転車のしすぎでこんなことに。。。&lt;/p&gt;

&lt;p&gt;つま先でブレーキしても大丈夫な靴はないものかと探していると、キーンというメーカーを見つけました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.keenfootwear.com/ja-jp/&quot;&gt;https://www.keenfootwear.com/ja-jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CHANDLER CNXというモデルがAmazonに売っていたので、購入しました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B010CDH6EW&amp;amp;linkId=b50e535566d879756eaaebf6c394c1a2&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;つま先がゴムのような物に覆われているので、かなり強そうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-06-01/cover.jpeg&quot; alt=&quot;キーン CHANDLER CNX&quot; title=&quot;キーン CHANDLER CNX&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これでペダルなし自転車のブレーキでも、靴がボロボロになることはなさそうです。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2020/06/01/keen-kids-shoes.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2020/06/01/keen-kids-shoes.html</guid>
        
        <category>キーン</category>
        
        <category>ストライダー</category>
        
        <category>キッズシューズ</category>
        
        <category>ペダルなし自転車</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part4 自分のオリジナルのテーマを作る</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成すr - Part4 自分のオリジナルのテーマを作る」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllのテーマのカスタマイズする&quot;&gt;Jekyllのテーマのカスタマイズする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;前回の記事&lt;/a&gt;ではJekyllの設定をカスタマイズする方法を紹介しました。&lt;/p&gt;

&lt;p&gt;カスタマイズするとはいえ、既存のテーマを使っていました。&lt;/p&gt;

&lt;p&gt;Jekyllでは既存のテーマを使うこともできるのですが、さらに一歩踏み込んで、自分で既存のテーマをカスタマイズしたり、テーマを作ることもできます。&lt;/p&gt;

&lt;p&gt;まずは、既存のテーマをカスタマイズする方法について紹介します。&lt;/p&gt;

&lt;h2 id=&quot;既存のテーマをカスタマイズする&quot;&gt;既存のテーマをカスタマイズする&lt;/h2&gt;

&lt;p&gt;Jekyllでは&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;で設定しているテーマを使いつつ、自分で少しカスタマイズすることができます。
カスタマイズ方法はテーマによったりもするのですが、例えばデフォルトのテーマ&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;では、&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;GitHubのリポジトリ&lt;/a&gt;にカスタマイズ方法が記載されています。&lt;/p&gt;

&lt;p&gt;Jekyllはディレクトリの構造が決められているので、そのルールにしたがって定義されているファイルを上書きすることで、カスタマイズすることができます。&lt;/p&gt;

&lt;p&gt;例えば、ヘッダー部分をカスタマイズしたい場合は、自分のリポジトリに&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;フォルダを作成して、&lt;code class=&quot;highlighter-rouge&quot;&gt;header.html&lt;/code&gt;を作成します。ゼロから作るのは難しいと思うので、&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;のデフォルトの&lt;code class=&quot;highlighter-rouge&quot;&gt;header.html&lt;/code&gt;をコピーした上でカスタマイズしていくと良いと思います。&lt;/p&gt;

&lt;p&gt;Jekyllでは&lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt;というテンプレートを処理するための言語が使用されています。Liquidを使うことでテンプレートの中でif文によって分岐やループ処理を書くことができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;Jekyllでは様々な変数が定義されている&lt;/a&gt;ので、それらを使ってテンプレートを書いていくことでレイアウトやページを作成していきます。&lt;/p&gt;

&lt;p&gt;レイアウトをカスタマイズする場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;フォルダを作りカスタマイズしたいレイアウトのhtmlファイルと同じファイル名でhtmlを作成し中身を上書きします。&lt;/p&gt;

&lt;p&gt;こちらも0から作るのは大変なので、既存のレイアウトをコピーしてからカスタマイズしていくといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;ではcssをカスタマイズすることも可能です。&lt;code class=&quot;highlighter-rouge&quot;&gt;assets/css/style.scss&lt;/code&gt;というファイルを作成します。拡張子からもわかるようにJekyllはsassをサポートしており、sassで記述していくことが可能です。&lt;/p&gt;

&lt;p&gt;またファイルの先頭には以下を記述する必要があります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
---

@import &quot;minima/skins/classic&quot;;
@import &quot;minima/initialize&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように既存のテーマをカスタマイズしていく場合は、基本的にはテーマで定義されているファイルを上書きして自分のファイルを作成する、という手順になります。&lt;/p&gt;

&lt;h2 id=&quot;自分のテーマを作る&quot;&gt;自分のテーマを作る&lt;/h2&gt;

&lt;p&gt;Jekyllでは既存のテーマをカスタマイズするだけでなく、自分のテーマを作ることもできます。&lt;/p&gt;

&lt;p&gt;これまではGemで公開されているテーマを使ってきましたが、Jekyllのディレクトリ構造にしたがって、必要なファイルを作成すれば自分のオリジナルのページを作ることができます。Wordpressでテーマを作るのに似ています。&lt;/p&gt;

&lt;p&gt;Jekyllのディレクトリやテンプレート言語のLiquidの使い方については&lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;Jekyllの公式サイト&lt;/a&gt;に書かれています。テンプレートの作り方全てを紹介するのは難しいのですが、基本的にはレイアウトに使われるhtmlやヘッダー・フッターなどの共通のhtmlなどを作成していくような形になります。&lt;/p&gt;

&lt;p&gt;既存のテーマをカスタマイズする場合は、上書きしない部分を変更する必要はありませんでしたが、自分でテーマを作る場合は全て作る必要があります。しかしかなり柔軟にレイアウトを作成することができるので、まずはテーマを使ってみて、不満な部分があれば自分でテーマを作ってみるのをお勧めします。&lt;/p&gt;

&lt;p&gt;ちなみに、このブログは自分でレイアウトを作成しています。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Part1からPart4で、GitHub Pagesで無料ブログを作成する方法を詳しく説明してみました。形さえ出来あがればあとはMarkdownで記事を書いていくだけで、とても使いやすいのでGitHub Pagesを使ったサイト作りはお勧めです。&lt;/p&gt;

&lt;p&gt;Jekyllでサイト自体は生成できるので、静的サイトをホスティングできるところであればGitHub Pagesではなくても同じサイトを構築することができる点もメリットですね。もしファイルサイズはアクセス数に引っかかってしまった場合も、例えばAWSのS3のような場所に引越ししやすいのではないかと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 31 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part3 Jekyllの設定をカスタマイズする</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成する - Part3 Jekyllの設定をカスタマイズする」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ローカルでjekyllを実行する&quot;&gt;ローカルでJekyllを実行する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;前回の記事&lt;/a&gt;では、Jekyllのテーマを利用する方法と記事を追加する方法を紹介しました。&lt;/p&gt;

&lt;p&gt;今回はさらにJekyllをカスタマイズしていきますが、確認を簡単にするためにまずJekyllをローカル環境で実行する方法を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyllのサイト&lt;/a&gt;に書いてありますが、gemでjekyllをbundlerをインストールして起動することができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler
$ cd your-repository
$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これまで作成したブログのリポジトリをクローンして、jekyllを実行できるようにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone your-repository
$ cd your-repository
$ bundle exec jekyll new . --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; オプションをつけるとこれまで作成したファイルがいったんJekyllのテンプレートで上書きされます。&lt;/p&gt;

&lt;p&gt;デフォルトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;というテーマが有効になっています。&lt;/p&gt;

&lt;p&gt;その状態でJekyllを実行してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行するとローカルでブログを立ち上げることができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;about.md&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;404.html&lt;/code&gt;が生成されていたり、&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;が上書きされています。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;で初期化するとデフォルトのテーマである&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;が適用されるので、今後は&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;のテーマを想定して作っていきます。&lt;/p&gt;

&lt;h2 id=&quot;github-pagesのプラグインとテーマを使う&quot;&gt;GitHub Pagesのプラグインとテーマを使う&lt;/h2&gt;

&lt;p&gt;もし、元々使っていたGitHub Pagesのテーマを使いたい場合には、&lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;のプラグインを入れる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を見ると、&lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;というgemがコメントアウトされていると思うので、記載されているコメントにしたがってコメントアウトを外します。
それに伴い、jekyllの方はコメントアウトします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This will help ensure the proper Jekyll version is running.
# Happy Jekylling!
# gem &quot;jekyll&quot;, &quot;~&amp;gt; 3.8.7&quot;

# If you want to use GitHub Pages, remove the &quot;gem &quot;jekyll&quot;&quot; above and
# uncomment the line below. To upgrade, run `bundle update github-pages`.
gem &quot;github-pages&quot;, group: :jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そしてgemをアップデートします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に記載されているthemeを例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-theme-cayman&lt;/code&gt;に戻して、&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;を元に戻せば、元々のテーマを使うことができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;を使う場合はそのままでオッケーです。&lt;/p&gt;

&lt;p&gt;上記のようにGitHub Pagesでは必要なGemをインストールして、&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;を変更すると設定をカスタマイズすることができます。
例えばテーマを変更したりサイトのタイトルを編集することができます。&lt;/p&gt;

&lt;h2 id=&quot;レイアウトとページ&quot;&gt;レイアウトとページ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;で初期化すると &lt;code class=&quot;highlighter-rouge&quot;&gt;about.md&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;404.html&lt;/code&gt;が追加されたと思います。jekyllではこのようにブログの記事以外に個別のページを作ることができます。&lt;/p&gt;

&lt;p&gt;例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;about.md&lt;/code&gt;というファイルを作ると、&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io/about/&lt;/code&gt;というページを作ることができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;404.html&lt;/code&gt;は特別なファイルで、アクセスしたページが存在しないときに使われるファイルです。&lt;/p&gt;

&lt;p&gt;このようにページをどんどん作成することができます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;about.md&lt;/code&gt;を見ると、&lt;code class=&quot;highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;layout: page&lt;/code&gt;という設定がヘッダーのところに記載されていると思います。これは各テーマが作っているレイアウトのテンプレートを設定しています。テーマによって、いくつかのページのレイアウトが用意されていて、ページごとにどのレイアウトを使うかを設定できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt;には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;default&lt;/li&gt;
  &lt;li&gt;home&lt;/li&gt;
  &lt;li&gt;page&lt;/li&gt;
  &lt;li&gt;post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4つのレイアウトが用意されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;次のPart4&lt;/a&gt;では、レイアウトを自分で変更してオリジナルのテンプレートを作る方法を書いていきます。&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part2 Jekyllを使ってみる</title>
        <description>&lt;p&gt;「GitHub Pagesで無料ブログを作成する - Part2 Jekyllを使ってみる」です。&lt;/p&gt;

&lt;p&gt;他の記事はこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllとは&quot;&gt;Jekyllとは&lt;/h2&gt;

&lt;p&gt;JekyllはGitHub Pagesで使用することができる静的サイトのジェネレータです。Jekyllを使うことで、Markdownで書いたブログの記事やhtmlで作ったページをビルドして、公開用のhtmlとして生成することができます。&lt;/p&gt;

&lt;p&gt;htmlを事前に生成して、公開時にはサーバーサイドによる動的な処理を実行せずhtmlを表示するだけなので、静的サイトになります。
JekyllにはWordpressのように、いくつかのテーマが提供されていて、それらを活用することで簡単にブログサイトを構築することができます。&lt;/p&gt;

&lt;p&gt;静的サイトジェネレータは他にも&lt;a href=&quot;https://gohugo.io&quot;&gt;HUGO&lt;/a&gt;や&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby&lt;/a&gt;などがありますが、GitHub Pagesはデフォルトで&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;をサポートしています。そのため、特別なカスタマイズをしなければ、Jekyllで事前にビルドする必要もなくGitHub Pagesでテーマを活用したブログを構築することができます。&lt;/p&gt;

&lt;h2 id=&quot;jekyllを使ってみる&quot;&gt;Jekyllを使ってみる&lt;/h2&gt;

&lt;p&gt;GitHub PagesでJekyllのテンプレートを使うのは簡単です。リポジトリのメニューからSettingsを開いて、下の方にあるGitHub Pagesの設定をみると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Choose a theme&lt;/code&gt; というメニューがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-26/chooseatheme.png&quot; alt=&quot;Choose a theme&quot; title=&quot;Choose a theme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンをクリックするとテーマセレクタ画面が表示されます。テーマを選択することでプレビューを見ることもできます。
良さそうなテーマがあれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;Select theme&lt;/code&gt;で決定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-26/selecttheme.png&quot; alt=&quot;Select theme&quot; title=&quot;Select theme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;するとテーマが適用されます。具体的にはリポジトリに &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; というファイルが新しく追加されています。中身は以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;theme: jekyll-theme-cayman (実際に選んだテーマ)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyllはこの&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に基づいて静的サイトを生成しますが、GitHub PagesはJekyllをサポートしているので既存のテーマを使うだけであればこれだけでテーマを適用することができます。&lt;/p&gt;

&lt;h2 id=&quot;新規ポストを投稿する&quot;&gt;新規ポストを投稿する&lt;/h2&gt;

&lt;p&gt;Jekyllのルールではブログの記事は &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;フォルダの中に、&lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;という形式で記事を配置する必要があります。例えば、&lt;code class=&quot;highlighter-rouge&quot;&gt;2020-05-26-first-post.md&lt;/code&gt;などです。&lt;/p&gt;

&lt;p&gt;Markdownファイルを作成したら、ファイルの一番上の部分にタイトルや日付などのメタデータを書き込み、その下に記事のコンテンツを書き込みます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: &quot;First post&quot;
date: 2020-05-26
---

# Fist post

First post

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをリポジトリに配置すれば記事が公開されます。&lt;/p&gt;

&lt;p&gt;トップページに記事の一覧を表示するには&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;に以下を追記します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;ul&amp;gt;
  {% for post in site.posts %}
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&quot;{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;次のPart3&lt;/a&gt;ではJekyllの設定をカスタマイズする方法を書いていきます。&lt;/p&gt;
</description>
        <pubDate>Tue, 26 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>GitHub Pagesで無料ブログを作成する - Part1 GitHubにリポジトリを作ってサイトを公開する</title>
        <description>&lt;p&gt;以前、 &lt;a href=&quot;https://masamichi.me/development/2019/12/14/github-pages-blog.html&quot;&gt;GitHub Pagesでブログを運用し始めてから4年くらいたった&lt;/a&gt;というブログを書いたのですが、概要を書いただけで具体的な構築方法はあまり記述していなかったので、何回かに分けてブログを作っていく方法を書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;基本的には &lt;a href=&quot;https://help.github.com/ja/github/working-with-github-pages/about-github-pages&quot;&gt;GitHubのヘルプページ&lt;/a&gt;を読むのが確実です。&lt;/p&gt;

&lt;h3 id=&quot;掲載予定&quot;&gt;掲載予定&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html&quot;&gt;Part1 GitHubにリポジトリを作ってサイトを公開する&lt;/a&gt; (この記事です)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;Part2 Jekyllを使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/28/github-pages-blog-part3-cutomize-setting.html&quot;&gt;Part3 Jekyllの設定をカスタマイズする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/31/github-pages-blog-part4-original-theme.html&quot;&gt;Part4 自分のオリジナルのテーマを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-github-pagesについて知る&quot;&gt;1. GitHub Pagesについて知る&lt;/h2&gt;

&lt;p&gt;GitHub PagesはGitHubにリポジトリを作りそこにサイト用のファイルを配置することで、Webサイトとして運用できる仕組みです。 GitHub Pagesのサイトには個人のユーザーであればユーザーサイトか、プロジェクトのサイトがあります。&lt;/p&gt;

&lt;p&gt;ユーザーサイトは &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt; (usernameのところは自分のGitHubユーザー名に置き換える)というリポジトリを作成する必要があります。 &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt; リポジトリの &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; ブランチに配置されたファイルがWebサイトとして公開されます。その場合のurlは&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io&lt;/code&gt;になります（設定次第でカスタムドメインを使うことも可能です）。&lt;/p&gt;

&lt;p&gt;プロジェクトサイトは特にリポジトリ名にルールはなく、普段作成しているリポジトリで管理できます。urlは&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io/project&lt;/code&gt;(projectの部分がリポジトリ名に置き換わる)という形になります。
ただしプロジェクトサイトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;ブランチが公開されるのではなく、&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;ブランチが公開されます。&lt;/p&gt;

&lt;p&gt;主に個人の情報を公開したりブログを作ったりする場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;のユーザーサイト、自分が作っているOSSのようなプロジェクトについての情報を公開する場合はプロジェクトサイトを使う、という形で使い分けていけばいいと思います。&lt;/p&gt;

&lt;p&gt;ここではユーザーサイトをサンプルに作ってみます。&lt;/p&gt;

&lt;h2 id=&quot;2-githubにリポジトリを作る&quot;&gt;2. GitHubにリポジトリを作る&lt;/h2&gt;

&lt;p&gt;ではGitHubに実際にリポジトリを作ってみましょう。&lt;/p&gt;

&lt;p&gt;GitHubの右上のナビゲーションバーのプラスボタンから&lt;code class=&quot;highlighter-rouge&quot;&gt;New repository&lt;/code&gt;を選びます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-24/newrepository.png&quot; alt=&quot;New repository&quot; title=&quot;New repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Repository Name&lt;/code&gt;のところに、&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;を入力します。私の場合はすでに作成済なのでエラーになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-24/input.png&quot; alt=&quot;username.github.io&quot; title=&quot;username.github.io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize this repository with a README&lt;/code&gt; のチェックはどちらでも大丈夫です。&lt;/p&gt;

&lt;p&gt;これでリポジトリの作成ができました。&lt;/p&gt;

&lt;h2 id=&quot;3-リポジトリにファイルを作って公開する&quot;&gt;3. リポジトリにファイルを作って公開する&lt;/h2&gt;

&lt;p&gt;リポジトリが作成されたらすでに公開準備は整っているので、ファイルを追加してサイトを公開します。&lt;/p&gt;

&lt;p&gt;まずリポジトリをクローンします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/username/usernam.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;というファイルを作成して適当に中身を書きます。&lt;/p&gt;

&lt;p&gt;index.md&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをリポジトリに追加してGitHubにプッシュします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add index.md
$ git commit -m &quot;first commit&quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io&lt;/code&gt;にアクセスすると、Hello worldと表示されると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-24/helloworld.png&quot; alt=&quot;hello world&quot; title=&quot;hello world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上でサイトの公開ができました。&lt;/p&gt;

&lt;h2 id=&quot;4-設置を確認する&quot;&gt;4. 設置を確認する&lt;/h2&gt;

&lt;p&gt;リポジトリのナビゲーションメニューのSettingに移動するとGitHug Pagesの設定を確認することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-24/settings.png&quot; alt=&quot;settings&quot; title=&quot;settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;設定の中にEnforce HTTPSという項目があるので、このチェックをオンにしておくことをお勧めします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-05-24/https.png&quot; alt=&quot;Enforce HTTPS&quot; title=&quot;Enforce HTTPS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上で無事サイトを公開することができました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/development/2020/05/26/github-pages-blog-part2-jekyll.html&quot;&gt;次のPart2&lt;/a&gt;ではJekyllというツールを使って、ブログ形式のサイトを構築する方法を書いていきます。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/05/24/github-pages-blog-part1-repository.html</guid>
        
        <category>GitHub Pages</category>
        
        <category>ブログ</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>東芝の過熱水蒸気オーブンレンジ 石窯ドームER-TD3000がよかった</title>
        <description>&lt;p&gt;10年以上使ってきたNationalの電子レンジから、東芝の過熱水蒸気オーブンレンジ 石窯ドームER-TD3000に買い換えました。&lt;/p&gt;

&lt;p&gt;ヨドバシカメラでキャッシュレス決済キャンペーンをしていて、15%ポイントバックされるので買いました。&lt;/p&gt;

&lt;p&gt;買い換えてよかっですね、やっぱり特にオーブン機能がいいですね。&lt;/p&gt;

&lt;p&gt;石窯ドームはより上位の機種だと350度まで加熱できるようですが、300度もあれば充分かなと思い、ER-TD3000にしときました。&lt;/p&gt;

&lt;p&gt;オーブンレンジをアップデートすることで、家でできる料理の幅がかなり広がるということを実感しております。&lt;/p&gt;

&lt;p&gt;コロナ禍でパンをつくり始める人が多いみたいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://headlines.yahoo.co.jp/article?a=20200426-00345635-toyo-bus_all&quot;&gt;コロナ禍「パンを作る人」が激増している背景&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我が家でもオーブンレンジを買い換えたので、マニュアルに載っているレシピを見ながら、パンやピザを作っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-04-29/bread.jpg&quot; alt=&quot;パン&quot; title=&quot;パン&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/hobby/2020/04/29/toshiba-ishigamadome.html</link>
        <guid isPermaLink="true">https://masamichi.me/hobby/2020/04/29/toshiba-ishigamadome.html</guid>
        
        <category>オーブンレンジ</category>
        
        <category>東芝</category>
        
        <category>石窯ドーム</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>鼻うがいの仕方</title>
        <description>&lt;p&gt;このYoutubeによるとコロナウイルスは鼻水に多く含まれるらしいです。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qICAP83rDck&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;鼻うがいがコロナウイルスに効くかは全く知りませんが、鼻中隔湾曲症の手術をしてから鼻うがいをするように先生に言われていて、鼻がすっきりするのでやり方を書いておきます。&lt;/p&gt;

&lt;h2 id=&quot;1-鼻洗浄器を買う&quot;&gt;1. 鼻洗浄器を買う&lt;/h2&gt;

&lt;p&gt;Amazonで鼻洗浄器を書います。私が病院でお勧めされたのはこれです。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B000FQSODO&amp;amp;linkId=00686cc05b545b9de05e53fcf0199b8a&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;なんでもいいと思います。&lt;/p&gt;

&lt;h2 id=&quot;2-生理食塩水を作る&quot;&gt;2. 生理食塩水を作る&lt;/h2&gt;

&lt;p&gt;水1リットルに対して、10gの食塩を入れると生理食塩水が作れます。普通の水で鼻うがいすると痛いので、生理食塩水を使いましょう。&lt;/p&gt;

&lt;h2 id=&quot;3-鼻うがいする&quot;&gt;3. 鼻うがいする&lt;/h2&gt;

&lt;p&gt;鼻洗浄器に生理食塩水を入れて鼻うがいします。&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/hobby/2020/03/29/hanaugai.html</link>
        <guid isPermaLink="true">https://masamichi.me/hobby/2020/03/29/hanaugai.html</guid>
        
        <category>鼻うがい</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>ほったらかし投資は難しいなという話</title>
        <description>&lt;p&gt;始めてからある程度たちましたが、いわゆるほったらかし投資をしています。&lt;/p&gt;

&lt;p&gt;毎月少額を特定の投資信託に積み立てていくというやつです。&lt;/p&gt;

&lt;p&gt;当時の私は全然お金の知識はなかったのですが、お金に詳しい友人から色々教えてもらい、本を買って少し勉強して始めました。&lt;/p&gt;

&lt;p&gt;その時教えてもらって参考にした本。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=maasaamiichii-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00NLWAHTS&amp;amp;linkId=ffc6a5c7414beeef88ff59eab4760f41&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;ほったらかし投資で大事なのは、市場の状態にかかわらず、毎月定額ずつ買ういわゆるドルコスト平均法だったと思います。それから毎月定額を積み立てて投資しています。&lt;/p&gt;

&lt;p&gt;投資を初めて一番良かったのは、経済とか政治とか世界の情勢とか、気になるところですね。&lt;/p&gt;

&lt;p&gt;毎日色々なニュースが流れてきますが、それによって株価が変わったりするので、つまり資産の状態が変わっていくわけで、経済ニュースなんかもかなり読むようになりました。ポジションをとって当事者になることは大事だなと思います。&lt;/p&gt;

&lt;p&gt;私がやっている方法は毎月定額ずつ買っていくだけ、それも自動で行われるので実際の作業は何もありません。が、これがとても難しいことだなと改めて思っています。&lt;/p&gt;

&lt;p&gt;毎日上がったり下がったりするので、ほったらかしとはいえやっぱり気にはなります。上がっている時は嬉しいし、下がっている時は悲しいですね。&lt;/p&gt;

&lt;p&gt;そして、今まさに新型コロナウイルスによって、世界の経済にかなり影響があり市場も急落しています。毎日サーキットブレーカー発動する、みたいな一週間もありましたね。。。
まさに歴史的な瞬間を生きているのかなと思います。&lt;/p&gt;

&lt;p&gt;株価は急落していて、こんなに下がる？っていうくらい下がっています。今のところピークから30%くらい下がってますかね。今後どうなるかもわからないのでもっと下がるかもしれません。
こういうことがあると、今は買わない方がいいんじゃないかとか、もっと早めに売っておいた方がいいんじゃないかとか、そもそも下がってしまって辛いとか、色々な感情があります。&lt;/p&gt;

&lt;p&gt;やっぱり一喜一憂してしまうので、精神的に疲れるところがとても難しいです。本にも、毎月定額ずつ買っていくだけというのは一見簡単そうに見えてとても難しいと書いてあった気がします。&lt;/p&gt;

&lt;p&gt;こんなに激しく変わるとやっぱりかなり痛いのですが、とはいえ、ほったらかし投資勢としてはこういう時でも気にせずほったらかしておく、というのを貫いていこうと思います。&lt;/p&gt;

&lt;p&gt;今後どうなっていくのかはまだ全然分かりませんが、数年後この記事をみたときに懐かしく思えていればいいなと思います。&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/hobby/2020/03/28/investment-is-hard.html</link>
        <guid isPermaLink="true">https://masamichi.me/hobby/2020/03/28/investment-is-hard.html</guid>
        
        <category>ほったらかし投資</category>
        
        
        <category>hobby</category>
        
      </item>
    
      <item>
        <title>FirebaseでCloud Storageに画像をアップロードする</title>
        <description>&lt;p&gt;今FirebaseとReactでアプリを開発中で、画像をアップロードする部分を作ったのでメモ。&lt;/p&gt;

&lt;p&gt;アップロード部分&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// uploadPhotoという名前でexport&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadPhoto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storageRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UUIDを作っていますがなんでもOK&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;image/png&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storageRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UUIDを返していますが返さなくてもOK&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使う部分&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SampleUploader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isPosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Preview&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;photoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;isPosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photoId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadPhoto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// use photoId&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;isPosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readAsDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;投稿する&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;無事FirebaseのCloud Storageに画像をアップロードすることができました。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/01/03/upload-image-firebase.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/01/03/upload-image-firebase.html</guid>
        
        <category>Firebase</category>
        
        <category>Cloud Storage</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>2020年にネイティブアプリを開発する方法</title>
        <description>&lt;p&gt;去年&lt;a href=&quot;https://masamichi.me/development/2019/01/05/build-a-native-app-in-2019.html&quot;&gt;2019年にネイティブアプリを開発する方法&lt;/a&gt;という記事を書きました。&lt;/p&gt;

&lt;p&gt;その中では&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ネイティブ言語、ネイティブプラットフォーム&lt;/li&gt;
  &lt;li&gt;React Native&lt;/li&gt;
  &lt;li&gt;Flutter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の3つの方法を紹介していました。&lt;/p&gt;

&lt;p&gt;2020年はどういう感じになりそうか、という実感を書いておきたいと思います。私はAndroidの開発方法については詳しくないので触れません。&lt;/p&gt;

&lt;p&gt;選択肢としては、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flutter&lt;/li&gt;
  &lt;li&gt;ネイティブ言語、新しいフレームワーク(Swift/SwiftUI)&lt;/li&gt;
  &lt;li&gt;ネイティブ言語、従来のフレームワーク(Swift/UIKit)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という感じかなと思っています。&lt;/p&gt;

&lt;p&gt;ちなみにGoogleトレンドで、Flutter, React Native, SwiftUIを比較してみるとこんな感じです。
&lt;img src=&quot;/assets/posts/2020-01-01/compare.png&quot; alt=&quot;Compare&quot; title=&quot;Compare&quot; /&gt;&lt;/p&gt;

&lt;p&gt;期間は2018年1月1日から2019年12月31日です。2019年9月~10月ごろにFlutterがReact Nativeを超えてきているような感じでしょうか。SwiftUIはWWDC直後は増えているもののここ最近は横ばいのようです。&lt;/p&gt;

&lt;h2 id=&quot;1-flutter&quot;&gt;1. Flutter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-01-01/flutter.png&quot; alt=&quot;Flutter&quot; title=&quot;Flutter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FlutterはiOS, Android, Web, Desktopのクロスプラットフォームな環境に対してネイティブアプリを開発できるGoogle製のフレームワークです。プログラミング言語はDartを採用しています。&lt;/p&gt;

&lt;p&gt;Flutterは2019年とても勢いがあったように感じました。2019年QiitaのアドベントカレンダーでもFlutterが購読数1位だったようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/ranking/subscriptions/categories/mobile&quot;&gt;Qiitaのモバイルのカレンダーランキング&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flutterでは、WidgetとDartのStreamを組み合わせるBLoC(Business Logic Components)パターンというアーキテクチャが主流のようです。&lt;/p&gt;

&lt;p&gt;このビデオがわかりやすかったです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google IOのビデオ　Build reactive mobile apps with Flutter (Google I/O ‘18)&lt;/strong&gt;&lt;/p&gt;

&lt;iframe class=&quot;w-100&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RS36gBEp8OI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;こちらの記事も
&lt;a href=&quot;https://www.raywenderlich.com/4074597-getting-started-with-the-bloc-pattern&quot;&gt;Getting Started with the BLoC Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでのクロスプラットフォームアプリ開発のフレームワークとは違った盛り上がりを見せているな、と言う印象のFlutterですが、2020年どうなるか注目です。&lt;/p&gt;

&lt;p&gt;開発したアプリではBLoCパターンは使っていなかったので今後このパターンを使いつつ、個人でもFlutterでアプリ開発をしていきたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;2-ネイティブ言語新しいフレームワークswiftswiftui&quot;&gt;2. ネイティブ言語、新しいフレームワーク(Swift/SwiftUI)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-01-01/swiftui.png&quot; alt=&quot;SwiftUI&quot; title=&quot;SwiftUI&quot; /&gt;
&lt;small&gt;&lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;Appleのサイト&lt;/a&gt;からスクリーンショット&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;WWDC2019で突然発表されたUIフレームワークがSwiftUIです。&lt;/p&gt;

&lt;p&gt;ついに公式で宣言的シンタックスがサポートされました。&lt;/p&gt;

&lt;p&gt;ReactやFlutterと同様、コンポーネントを組み合わせてViewを作っていく方式で、Stateの管理などもSwiftUIとCombineフレームワークでうまくできるようになっています。&lt;/p&gt;

&lt;p&gt;個人的にリファレンスになるリポジトリはこちらのMovieSwiftUIです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Dimillian/MovieSwiftUI&quot;&gt;MovieSwiftUI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2019年にSwiftUIでアプリを1つ開発しましたが、コンポーネント指向でかけるところはいいものの、想定外の動きをする場合があったりして、もっとチップスが色々共有されてくるといいですね。&lt;/p&gt;

&lt;p&gt;2020年、大規模で複雑なアプリをSwiftUIで作るのはまだ難しい部分もあるかもしれませんが、先取りで挑戦していく価値はあると思います。小規模なアプリならお試しで使ってみるのもいいと思います。&lt;/p&gt;

&lt;p&gt;もっとSwiftUIネイティブのコンポーネントが増えてくると便利になってくるでしょう。
とはいえ、Twitter上ではiPodをSwiftUIでiOS上に再現された方もいて、うまく作ればかなり高機能なアプリも開発できます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Turned my iPhone into an iPod Classic with Click Wheel and Cover Flow with &lt;a href=&quot;https://twitter.com/hashtag/SwiftUI?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#SwiftUI&lt;/a&gt; &lt;a href=&quot;https://t.co/zVk5YJj0rh&quot;&gt;pic.twitter.com/zVk5YJj0rh&lt;/a&gt;&lt;/p&gt;&amp;mdash; Elvin (@elvin_not_11) &lt;a href=&quot;https://twitter.com/elvin_not_11/status/1199717678908366854?ref_src=twsrc%5Etfw&quot;&gt;November 27, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;3-ネイティブ言語従来のフレームワークswiftuikit&quot;&gt;3. ネイティブ言語、従来のフレームワーク(Swift/UIKit)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/swift.jpeg&quot; alt=&quot;Swift&quot; title=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020年でもネイティブアプリを開発するにはこれが一番シンプルな手段だと思います。&lt;/p&gt;

&lt;p&gt;SwiftUIが発表されたものの、既存のアプリはまだほとんどUIKitベースでしょうし、UIKitでできていたことがSwiftUIだとなかなかできない、といったこともまだあるかなと思います。&lt;/p&gt;

&lt;p&gt;既存のアプリがあったり、大規模になりそうなアプリを開発していくならUIKitにしておく方が安全かもしれません。とはいえ長期的に考えるとSwiftUIに移行していくと思うので、部分的にSwiftUIを導入するとか、SwiftUIに移行しやすい形でUIKitで開発する、という方法がバランス的に良さそうです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、2020年にネイティブアプリを開発するオススメの方法を3つ紹介してみました。&lt;/p&gt;

&lt;p&gt;新しい開発方法は色々と出てくるものの、開発者として開発していて楽しいものを選ぶことが大事だと思います。&lt;/p&gt;

&lt;p&gt;もちろん食わず嫌いはよくないので、どのフレームワークも学んで試した上で、最近の潮流も含めどれが自分に合うかを見極めていけばいいと思います。&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2020 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2020/01/01/build-a-native-app-in-2020.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2020/01/01/build-a-native-app-in-2020.html</guid>
        
        <category>アプリ開発</category>
        
        <category>Swift UI</category>
        
        <category>Flutter</category>
        
        <category>Swift</category>
        
        <category>Dart</category>
        
        
        <category>development</category>
        
      </item>
    
  </channel>
</rss>
