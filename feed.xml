<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masamichi Ueta</title>
    <description>エンジニアリング・デザイン・日常</description>
    <link>https://masamichi.mehttps://masamichi.me/</link>
    <atom:link href="https://masamichi.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 16 Jul 2019 00:25:25 +0900</pubDate>
    <lastBuildDate>Tue, 16 Jul 2019 00:25:25 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>YAMAHAの電子ピアノCLP-675Bを購入しました</title>
        <description>&lt;p&gt;今年の4月から子供がピアノのレッスンに行き始めたということもあり、電子ピアノを購入しました。
購入したのはYAMAHAのCLP-675Bです。&lt;/p&gt;

&lt;p&gt;6月にヨドバシカメラが20%ポイントバックのキャンペーンをやっていたので、今しかないということで購入しました。
電子ピアノについては全然詳しくなかったのですが、購入するにあたり色々と調べたので、参考になれば良いと思います。&lt;/p&gt;

&lt;h2 id=&quot;電子ピアノの購入検討&quot;&gt;電子ピアノの購入検討&lt;/h2&gt;

&lt;p&gt;子供が4月からピアノに通い始めたのですが、楽しそうにやっているので家にも電子ピアノを買うことを検討し始めました。
先生に聞くと、Roland, YAMAHA, Kawaiのどれかでいいんじゃないかと言われて、電子ピアノについて調査を始めました。値段は10万から20万くらいはすると言われて、結構高いなと思いました。&lt;/p&gt;

&lt;h2 id=&quot;島村楽器に行ってみた&quot;&gt;島村楽器に行ってみた&lt;/h2&gt;

&lt;p&gt;とりあえず何もわからないので、島村楽器に行って実物を見てみました。15万から30万くらいまでの機種を弾き比べてもらったのですが、まぁ高い方がなんとなく響がいいくらいの感覚でした。電子ピアノには樹脂鍵盤と木製鍵盤というのがあって、実際のグランドピアノは木製鍵盤なので木製鍵盤の方が弾き心地が似ているということを知りました。&lt;/p&gt;

&lt;p&gt;あとは、スピーカーの数だったり、それぞれのメーカーごとの音色や鍵盤の違いだったりというのを聞きました。電子ピアノの機能的なところは各社同じ価格帯のものには似たような機能を搭載しているということでした。&lt;/p&gt;

&lt;p&gt;大事なのは、いかに実際のグランドピアノを再現できているかである、ということを学びました。やっぱりレッスンや発表会で引くのはグランドピアノなので、その時にいつも引いているピアノの感触や音色、響が重要になるようです。&lt;/p&gt;

&lt;h2 id=&quot;youtubeで検索&quot;&gt;Youtubeで検索&lt;/h2&gt;

&lt;p&gt;大きな買い物なので島村楽器で実物を見たあと、Youtubeで電子ピアノについて色々と調べました。&lt;/p&gt;

&lt;p&gt;特に島村楽器みなとみらい店さんのこの動画がよかったです。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/N-u_CnZeJ9U&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;残念ながら自宅はそんなに広くはないので、コンパクトな電子ピアノがいいかなと思っていました。なのでこの動画で紹介されている&lt;code class=&quot;highlighter-rouge&quot;&gt;Roland F-140R&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;Roland DP-603&lt;/code&gt;にしようと思いました。&lt;/p&gt;

&lt;h2 id=&quot;ヨドバシカメラで購入&quot;&gt;ヨドバシカメラで購入&lt;/h2&gt;

&lt;p&gt;たまたまヨドバシカメラが6月に20%ポイント還元キャンペーンを実施していたので、高い買い物をするには今しかないということで、購入を決意しました。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Roland F-140R&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;Roland DP-603&lt;/code&gt;を買おうかと思っていたのですが、結局&lt;code class=&quot;highlighter-rouge&quot;&gt;YAMAHA CLP-675B&lt;/code&gt;を購入しました。価格は26万円前後で木製鍵盤が使われています。&lt;/p&gt;

&lt;p&gt;結局&lt;code class=&quot;highlighter-rouge&quot;&gt;YAMAHA CLP-675B&lt;/code&gt;にした理由としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ヨドバシカメラの還元が大きいので、多少高くても良い&lt;/li&gt;
  &lt;li&gt;子供がまだ小さくて色々と吸収できる年齢なので、やっぱり木製鍵盤にしておいてあげたい&lt;/li&gt;
  &lt;li&gt;コンパクトピアノほどではないが、奥行きもそこまで大きくなくリビングに置ける&lt;/li&gt;
  &lt;li&gt;先生もYAMAHAを使っていてレッスンと同じメーカーである&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というところで、急遽&lt;code class=&quot;highlighter-rouge&quot;&gt;YAMAHA CLP-675B&lt;/code&gt;にしました。&lt;/p&gt;

&lt;p&gt;まぁ一番大きいのはヨドバシのポイント還元ですね、、実質20万円くらいの電子ピアノを購入するのと変わらないので。&lt;/p&gt;

&lt;h2 id=&quot;配送設置&quot;&gt;配送・設置&lt;/h2&gt;

&lt;p&gt;ヨドバシのECサイト ヨドバシ.comで購入しましたが、配送も問題なくしていただきました。購入後2日くらいで配送調整完了になり、配送業者から電話がかかってきて配送日を調整しました。当日も問題なく配送していただき、設置していただきました。&lt;/p&gt;

&lt;p&gt;実際に設置されるまでは購入から2週間後くらいでした。&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;子供も楽しそうに練習していて、奮発して買ってよかったと思っています。
自分も練習を始めたので、そのうちYoutubeにアップしたいと思います。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2019/07/16/electric-piano.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2019/07/16/electric-piano.html</guid>
        
        <category>電子ピアノ</category>
        
        <category>YAMAH</category>
        
        <category>CLP-675</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>鼻中隔湾曲症の手術をしたら世界が変わった話</title>
        <description>&lt;p&gt;2019年2月に鼻中隔湾曲症の手術をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://masamichi.me/family/2019/01/15/deflected-septum.html&quot;&gt;記事: 鼻中隔湾曲症と診断されたので手術します&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際には鼻中隔湾曲症だけではなく副鼻腔炎という鼻炎の手術もしました。手術から4ヶ月ほどたちまして、通院の必要性もなくなったので、感想を書いておいきます。&lt;/p&gt;

&lt;h2 id=&quot;世界が変わった&quot;&gt;世界が変わった&lt;/h2&gt;

&lt;p&gt;はい、世界が変わりました。&lt;/p&gt;

&lt;p&gt;近くの耳鼻科に言って鼻中隔湾曲症と言われた時に、「手術すれば世界が変わると思うよ」と先生に言われたのですが、確かに変わりました。
両方の鼻が常に通るので、ストレスがなくとても快適です。やっぱり、ストレスなく呼吸できるというのは本当に大事だなと思います。手術してよかったです。&lt;/p&gt;

&lt;p&gt;鼻中隔湾曲症だけでなく、副鼻腔炎（鼻炎）も直したので、鼻水がでることもなくなりました。手術してからは鼻をかむこともなくなりました。&lt;/p&gt;

&lt;p&gt;仕事柄、集中することが必要なのですが、無意識で呼吸が正常にできるだけで集中力が上がります。&lt;/p&gt;

&lt;p&gt;こちらの記事で&lt;a href=&quot;https://devpixiv.hatenablog.com/entry/2014/12/24/180000&quot;&gt;エンジニアの呼吸を支える技術&lt;/a&gt;が書かれていますが、症状としては同じです。&lt;/p&gt;

&lt;h2 id=&quot;手術するまでの経緯&quot;&gt;手術するまでの経緯&lt;/h2&gt;

&lt;p&gt;こちらの&lt;a href=&quot;https://masamichi.me/family/2019/01/15/deflected-septum.html&quot;&gt;記事: 鼻中隔湾曲症と診断されたので手術します&lt;/a&gt;にも書いたのですが、鼻づまりがひどかったので近くの耳鼻科にいきました。すると鼻中隔湾曲症と言われて、手術する為に大きい病院を紹介してもらいました。&lt;/p&gt;

&lt;p&gt;その病院で診察してもらい、手術日を決めて入院しました。&lt;/p&gt;

&lt;h2 id=&quot;入院から手術&quot;&gt;入院から手術&lt;/h2&gt;

&lt;p&gt;入院は全部で1週間でした。月曜日に入院して、火曜日に手術、日曜日に退院という流れです。手術するので手術の1日前に入院します。&lt;/p&gt;

&lt;h2 id=&quot;手術&quot;&gt;手術&lt;/h2&gt;

&lt;p&gt;手術は全身麻酔で行います。全身麻酔なので、始まったら終わってるという感じですね。手術が終わってからは、次の日の朝まで動けません。これが結構辛くて、特に鼻の手術なので息が鼻から全くできなくなってしまうのが辛いです。いくら鼻が詰まっていたとはいえ、少しは通っているのですが、手術後は詰め物されているので全く通りません。ベッドで寝っぱなしなのも腰が痛くなってきたりするので、何か暇を潰せる物を持っていけばよかったです。病院なのでwifiもありませんでした。&lt;/p&gt;

&lt;h2 id=&quot;手術後&quot;&gt;手術後&lt;/h2&gt;

&lt;p&gt;次の日からは動けますが、鼻に綿をつめた状態です。点滴は3日間くらいつけて、土曜日くらいに外していたと思います。退院から1週間は鼻に綿をつけた状態なので、マスクをつけて生活していました。&lt;/p&gt;

&lt;h2 id=&quot;費用&quot;&gt;費用&lt;/h2&gt;

&lt;p&gt;高額療養費制度というのがあって、退院時までに申請しておけば、退院時には決められた上限金額までしか支払わなくてよくなります。私は申請し忘れていたので、退院時には全部支払って、後日病院で清算してもらいました。全部で10万円くらいの費用だったと思います。&lt;/p&gt;

&lt;h2 id=&quot;鼻づまりで困っている人&quot;&gt;鼻づまりで困っている人&lt;/h2&gt;

&lt;p&gt;鼻中隔湾曲症の人は結構いるようで、困っている人も多いと思います。手術は不安かもしれませんが、呼吸が普通にできるというのはQOLにかなり影響しますので、しっかりと調べた上で、直せるなら直した方が良いと思います。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2019/07/01/bichukakuwankyokusho.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2019/07/01/bichukakuwankyokusho.html</guid>
        
        <category>鼻中隔湾曲症</category>
        
        <category>副鼻腔炎</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>Facebookが発表した仮想通貨Libraを動かしてみる</title>
        <description>&lt;p&gt;今週Facebookが仮想通貨Libraを発表しました。&lt;/p&gt;

&lt;p&gt;ステーブルコインとして価値が一定になるような仮想通貨で、Facebook Messenger, WhatsApp, 専用のウォレットアプリ カリブラ(Calibra)などで利用できるようです。&lt;/p&gt;

&lt;p&gt;Libraを使ったアプリを開発できるMoveというプログラミング言語も発表されています。&lt;/p&gt;

&lt;p&gt;LibraのDeveloperサイト &lt;a href=&quot;https://developers.libra.org&quot;&gt;https://developers.libra.org&lt;/a&gt;に、Libraを実行するチュートリアルがあったので、実行してみました。&lt;/p&gt;

&lt;h2 id=&quot;1-libraをクローンする&quot;&gt;1. Libraをクローンする&lt;/h2&gt;

&lt;p&gt;まずGitHubからLibraをクローンしてきましょう。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/libra/libra.git &amp;amp;&amp;amp; cd libra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-依存ライブラリをインストールする&quot;&gt;2. 依存ライブラリをインストールする&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./scripts/dev_setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;スクリプトを実行すると、依存ライブラリをインストールされます。&lt;/p&gt;

&lt;h2 id=&quot;3-libra-cliを実行する&quot;&gt;3. Libra CLIを実行する&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./scripts/cli/start_cli_testnet.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビルドするのに結構時間がかかりました。
ビルドが終わるとLibra CLIが起動します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-06-20/libracli.png&quot; alt=&quot;Libra CLI&quot; title=&quot;Libra CLI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-トランザクションを実行する&quot;&gt;4. トランザクションを実行する&lt;/h2&gt;

&lt;p&gt;LibraのMy First Transactionのページ &lt;a href=&quot;https://developers.libra.org/docs/my-first-transaction&quot;&gt;https://developers.libra.org/docs/my-first-transaction&lt;/a&gt; に沿って実行していきます。&lt;/p&gt;

&lt;h3 id=&quot;aliceとbobのアカウントを作成する&quot;&gt;AliceとBobのアカウントを作成する&lt;/h3&gt;

&lt;h4 id=&quot;1-cli-clientがシステムで動いているか確認する&quot;&gt;1. CLI Clientがシステムで動いているか確認する&lt;/h4&gt;

&lt;p&gt;Libra CLIで &lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt; コマンドを実行します。すると以下のようにコマンドの説明が表示されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Use the following args for this command:

create | c 
	Create an account. Returns reference ID to use in other operations
list | la 
	Print all accounts that were created or loaded
recover | r &amp;lt;file_path&amp;gt;
	Recover Libra wallet from the file path
write | w &amp;lt;file_path&amp;gt;
	Save Libra wallet mnemonic recovery seed to disk
mint | mintb | m | mb &amp;lt;receiver_account_ref_id&amp;gt;|&amp;lt;receiver_account_address&amp;gt; &amp;lt;number_of_coins&amp;gt;
	Mint coins to the account. Suffix 'b' is for blocking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-aliceのアカウントを作成する&quot;&gt;2. Aliceのアカウントを作成する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;account create&lt;/code&gt; コマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% account create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;するとアカウントのアドレスが発行されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Creating/retrieving next account from wallet
Created/retrieved account #0 address 05f2ce8714d7f6fb6eeb0735477ce31c7ee8087790bc522b1d37a8a107e82f46
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-bobのアカウントを作成する&quot;&gt;3. Bobのアカウントを作成する&lt;/h4&gt;

&lt;p&gt;もう一度 &lt;code class=&quot;highlighter-rouge&quot;&gt;account create&lt;/code&gt; コマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% account create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;すると次は #1のアカウントが作成されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Creating/retrieving next account from wallet
Created/retrieved account #1 address 806ada4d58bab45bf9f3ea1d37d2aa383a750812c16af63a57d69692459a3a97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-アカウント一覧を表示する&quot;&gt;4. アカウント一覧を表示する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;account list&lt;/code&gt; コマンドでアカウント一覧を表示できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% account list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;すると先ほど作成したアカウント一覧が表示されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User account index: 0, address: 05f2ce8714d7f6fb6eeb0735477ce31c7ee8087790bc522b1d37a8a107e82f46, sequence number: 0, status: Local
User account index: 1, address: 806ada4d58bab45bf9f3ea1d37d2aa383a750812c16af63a57d69692459a3a97, sequence number: 0, status: Local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;libraコインをaliceとbobのアカウントに追加する&quot;&gt;LibraコインをAliceとBobのアカウントに追加する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;account mint&lt;/code&gt;コマンドを使いますがこの機能はテストネットのみのようです。&lt;/p&gt;

&lt;h4 id=&quot;1-110-libraをaliceのアカウントに追加する&quot;&gt;1. 110 LibraをAliceのアカウントに追加する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;account mint&lt;/code&gt;コマンドでAliceのアカウントに110 Libraを追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% account mint 0 110
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;するとリクエストがサブミットされたことがわかります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Minting coins
Mint request submitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここではまだリクエストをサブミットしただけで実際に110Libra付与されたわけではありません。&lt;/p&gt;

&lt;h4 id=&quot;2-bobのアカウントに52libra追加する&quot;&gt;2. Bobのアカウントに52Libra追加する&lt;/h4&gt;

&lt;p&gt;Alice同様、BobのアカウントにもLibraを追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% account mint 1 52
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こちらもリクエストがサブミットされます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Minting coins
Mint request submitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-残高を確認する&quot;&gt;3. 残高を確認する&lt;/h4&gt;

&lt;p&gt;残高を確認するには、&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;コマンドを使います。&lt;/p&gt;

&lt;p&gt;Aliceの残高を確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% query balance 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;すると先ほど付与した110libraあることがわかります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Balance is: 110
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同様にBobの残高も確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% query balance 1
Balance is: 52
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;トランザクションを実行する&quot;&gt;トランザクションを実行する&lt;/h3&gt;

&lt;h4 id=&quot;アカウントのシーケンス番号を取得する&quot;&gt;アカウントのシーケンス番号を取得する&lt;/h4&gt;

&lt;p&gt;トランザクションを実行する前に、シーケンス番号を取得します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% query sequence 0
&amp;gt;&amp;gt; Getting current sequence number
Sequence number is: 0
libra% query sequence 1
&amp;gt;&amp;gt; Getting current sequence number
Sequence number is: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alice, Bobのどちらもシーケンス番号は0です。これはまだどちらのアカウントもトランザクションを実行していないことを意味します。&lt;/p&gt;

&lt;h4 id=&quot;送金する&quot;&gt;送金する&lt;/h4&gt;

&lt;p&gt;送金するには &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; コマンドを使用します。&lt;/p&gt;

&lt;p&gt;Alice(0)からBob(1)に10Libraを送金します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% transfer 0 1 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;すると送金リクエストがバリデータに送信されたことがわかります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% transfer 0 1 10
&amp;gt;&amp;gt; Transferring
Transaction submitted to validator
To query for transaction status, run: query txn_acc_seq 0 0 &amp;lt;fetch_events=true|false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query txn_acc_seq 0 0 true&lt;/code&gt; コマンドを実行することでトランザクションの詳細をみることができます。&lt;/p&gt;

&lt;p&gt;これでバリデータに承認されると送金が行われます。&lt;/p&gt;

&lt;h4 id=&quot;送金後のシーケンス番号を確認する&quot;&gt;送金後のシーケンス番号を確認する&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% query sequence 0
&amp;gt;&amp;gt; Getting current sequence number
Sequence number is: 1
libra% query sequence 1
&amp;gt;&amp;gt; Getting current sequence number
Sequence number is: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aliceのシーケンス番号は1, Bobのシーケンス番号は0のままです。AliceからBobに送金したのでAliceのシーケンス番号を1つ上がっています。&lt;/p&gt;

&lt;h4 id=&quot;aliceとbobの残高を確認する&quot;&gt;AliceとBobの残高を確認する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query balance&lt;/code&gt;コマンドを使って、両者の残高を確認しましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libra% query balance 0
Balance is: 100
libra% query balance 1
Balance is: 62
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上で送金ができました！&lt;/p&gt;

&lt;h2 id=&quot;試すのは簡単&quot;&gt;試すのは簡単&lt;/h2&gt;

&lt;p&gt;Libraの開発者サイトを参考にテストネットで試してみましたが、Libraを送金するのは非常に簡単ですね。&lt;/p&gt;

&lt;p&gt;今度はMoveについても試してみたいと思います。&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jun 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/cryptocurrency/2019/06/20/try-libra.html</link>
        <guid isPermaLink="true">https://masamichi.me/cryptocurrency/2019/06/20/try-libra.html</guid>
        
        <category>Libra</category>
        
        <category>Facebook</category>
        
        <category>CryptoCurrency</category>
        
        <category>Blockchain</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>macOSにPythonの環境を構築する方法</title>
        <description>&lt;p&gt;Pythonは機械学習やデータ分析でもっとも人気のある言語だと思います。ここではmacOSにPythonの環境を作る方法を紹介します。&lt;/p&gt;

&lt;h2 id=&quot;1-pyenvをインストールする&quot;&gt;1. pyenvをインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;Pyenv&lt;/a&gt;はPythonのバージョン管理をしてくれる便利なツールです。
Pyenvは&lt;a href=&quot;https://brew.sh&quot;&gt;homebrew&lt;/a&gt;を使ってインストールすることができます。もしhomebrewをインストールしていなければインストールしましょう。homebrewはmacOSで人気のあるパッケージマネージャです。&lt;/p&gt;

&lt;p&gt;pyenvをインストールするには以下のコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew update
$ brew install pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pyenvをインストールした後、bashの設定ファイルに設定を追記する必要がありますので、以下のコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo ‘export PYENV_ROOT=”$HOME/.pyenv”’ &amp;gt;&amp;gt; ~/.bash_profile
$ echo 'export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ echo -e 'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi' &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-pyenv-virtualenvをインストールする&quot;&gt;2. pyenv-virtualenvをインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot;&gt;Pyenv-virtualenv&lt;/a&gt;はPythonのVirtualenvを管理するPyenvのプラグインです。&lt;/p&gt;

&lt;p&gt;VirtualenvとはPythonの隔離された環境を作る方法です。例えばディレクトリごとにPythonのバージョンを変更することができます。&lt;/p&gt;

&lt;p&gt;Pyenv-virtualenvはpyenv同様homebrewでインストールすることができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install pyenv-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pyenv同様、bashの設定ファイルに設定を追記します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo ‘eval “$(pyenv virtualenv-init -)”’ &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上で環境を作る準備ができました。ターミナルを再起動してPythonの環境を作っていきましょう。&lt;/p&gt;

&lt;h2 id=&quot;pythonの環境を作る&quot;&gt;Pythonの環境を作る&lt;/h2&gt;

&lt;p&gt;まず始めに、使用するPythonのバージョンを決めましょう。特に気にしなければ、最新のバージョンを使います。&lt;/p&gt;

&lt;p&gt;どのバージョンや環境をインストールできるかはpyenvで確認することができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyenv install --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pythonをインストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyenv install 3.7.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次にVirtualenvを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyenv virtualenv 3.7.3 your-virtual-env-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pythonのプロジェクトのディレクトリに移動して、そのディレクトリのPythonの環境を指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd path-to-your-direcotry
$ pyenv local your-virtual-env-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv local&lt;/code&gt; コマンドは &lt;code class=&quot;highlighter-rouge&quot;&gt;.python-version&lt;/code&gt;ファイルを作成します。そのファイルによって、ディレクトリ内でどのpyenv環境を使うかが指定されます。&lt;/p&gt;

&lt;p&gt;これでpyenvが自動的にPythonの環境を作成したvirtualenvに切り替えてくれるようになりました。&lt;/p&gt;

&lt;h2 id=&quot;ライブラリをインストールする&quot;&gt;ライブラリをインストールする&lt;/h2&gt;

&lt;p&gt;Pythonを使う場合、 numpy, pandasやtenforflowのようなライブラリを使用することが多いかと思います。Pythonのライブラリをインストールするには、pipというPython用のパッケージマネージャを使用します。virtualenvと組み合わせることで、それぞれのvirtualenvごとにライブラリをインストールすることができます。例えばnumpyをインストールするにはpipでインストールコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;簡単ですね！&lt;/p&gt;

&lt;h2 id=&quot;ライブラリリストをエクスポートする&quot;&gt;ライブラリリストをエクスポートする&lt;/h2&gt;

&lt;p&gt;pipはインストールしたライブラリをテキストファイルに出力することができます。また逆にテキストファイルからライブラリ一覧をインストールすることができます。これは他のmacで同じ環境を作る時やdockerのようなコンテナに環境を再現する際に重要です。Pythonの環境をdockerにすることで、自分の環境で動作するスクリプトをAWSバッチやAWS Elastic Beanstalkのようなdockerをサポートするサービスで動かすことができます。&lt;/p&gt;

&lt;p&gt;エクスポート&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インポート&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでポータブルなPython環境を作ることができます。&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jun 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/06/15/how-to-seup-python-environment.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/06/15/how-to-seup-python-environment.html</guid>
        
        <category>macOS</category>
        
        <category>Python</category>
        
        <category>pyenv</category>
        
        <category>virtualenv</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>macOS 10.15 Catalinaのベータバージョンを安全にインストールする方法</title>
        <description>&lt;p&gt;WWDC2019でmacOS 10.15 Catalinaが発表され、Apple Beta Software Programに参加している場合はベータバージョンのCatalinaをインストールすることができます。&lt;/p&gt;

&lt;p&gt;あくまでベータバージョンですので、メインで使用しているmacにインストールしてしまうと、普段使っているアプリが動かなくなってしまう場合もあります。&lt;/p&gt;

&lt;p&gt;Apple公式に、ベータバージョンを安全にインストールする手順が記載されていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.apple.com/ja-jp/HT208891&quot;&gt;個別の APFS ボリュームに macOS をインストールする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ディスクユーティリティから、新しいAPFSボリュームを追加して、そこにインストールすることで現在使っているmacOSを失うことなく、使用できます。&lt;/p&gt;

&lt;p&gt;ボリュームを追加した後、Appleの&lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;ダウンロードサイト&lt;/a&gt;から新しいOSのプロファイルをインストールして、macOS10.15 Catalinaをダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-06-10/download.png&quot; alt=&quot;Download Catalina&quot; title=&quot;Download Catalina&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードするとインストーラが立ち上がるので、インストール先を先ほど作成した方のAPFSボリュームに指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-06-10/catalina1.png&quot; alt=&quot;Catalina1&quot; title=&quot;Catalina1&quot; /&gt;
&lt;img src=&quot;/assets/posts/2019-06-10/catalina2.png&quot; alt=&quot;Catalina2&quot; title=&quot;Catalina2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;あとはインストールされるのを待つだけです。&lt;/p&gt;

&lt;p&gt;起動ディスクを変更するにはシステム環境設定のスタートアップディスクから変更することができます。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/06/10/install-macos-catalina-safely.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/06/10/install-macos-catalina-safely.html</guid>
        
        <category>macOS</category>
        
        <category>Catalina</category>
        
        <category>APFS</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Interface BuilderのUI要素にベースのカスタムクラスが適用されているか検出する</title>
        <description>&lt;p&gt;Interface BuilderのUI要素にベースのカスタムクラスが適用されているか検出する方法について。&lt;/p&gt;

&lt;p&gt;アプリ開発のプロジェクトでは、スタイルガイドに沿ったベースのUIクラスを作成されている場合もあると思います。
例えばアプリのプライマリーカラーと同じ文字色のラベルやボタンなどが考えられます。Interface BuilderでUIを作成されている方は多いと思いますが、Interface Builderを使っているとそういったベースとなるUIクラスを適用し忘れがちです。
ベースとなるクラスを使えばいいのに、IB上で色やフォントを設定してしまったり、そもそもベースクラスの存在に気づかなかったりなど、どうしても起こってしまう問題かと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/IBDecodable/IBLinter&quot;&gt;IBLinter&lt;/a&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class&lt;/code&gt;ルールを使うとInterface BuilderのUI要素に指定のカスタムクラスが適用されているかをチェックすることができます。&lt;/p&gt;

&lt;p&gt;例えば全ての&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;PrimaryLabel&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;SecondaryLabel&lt;/code&gt;のどちらかのクラスを設定する必要がある場合はこの&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class&lt;/code&gt;ルールが便利です。
使い方は&lt;code class=&quot;highlighter-rouge&quot;&gt;IBLinter&lt;/code&gt;の設定ファイルである&lt;code class=&quot;highlighter-rouge&quot;&gt;.iblinter.yml&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;use_base_class_rule&lt;/code&gt;を追加し、チェックしたいクラスを&lt;code class=&quot;highlighter-rouge&quot;&gt;element_class&lt;/code&gt;に、適用したいカスタムクラスの一覧を&lt;code class=&quot;highlighter-rouge&quot;&gt;base_classes&lt;/code&gt;に記述します。&lt;/p&gt;

&lt;p&gt;例えば以下のような形です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enabled_rules:
  - use_base_class
use_base_class_rule:
  - element_class: UILabel
    base_classes:
      - PrimaryLabel
      - SecondaryLabel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;IBLinter&lt;/code&gt;を実行すると、&lt;code class=&quot;highlighter-rouge&quot;&gt;PrimaryLabel&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;SecondaryLabel&lt;/code&gt;が適用されていないラベルにはXcode上でwarningが表示されるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-03-18/cover.png&quot; alt=&quot;UseBaseClass&quot; title=&quot;UseBaseClass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これでIB上でベースクラスが適用されていないUI要素を確認することができます。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトを作成したので実際に警告が表示されるのを試してみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/masamichiueta/UseBaseClassRule&quot;&gt;masamichiueta/UseBaseClassRule&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Mar 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/03/18/iblinter-use-base-class.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/03/18/iblinter-use-base-class.html</guid>
        
        <category>Interface Builder</category>
        
        <category>iOS</category>
        
        <category>Xcode</category>
        
        <category>IBLinter</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>鼻中隔湾曲症と診断されたので手術します</title>
        <description>&lt;p&gt;昔からアレルギー性鼻炎があり鼻づまりがよく起こっていました。
そのためあまり気にならなかったのですが、よく考えると右の鼻が全然通らないことに最近気づきました。&lt;/p&gt;

&lt;p&gt;それで鼻の中を見ると、右の鼻の中が腫れていて穴が全然なかったんですね。。。&lt;/p&gt;

&lt;p&gt;で、近所の耳鼻科に行ったところ鼻中隔湾曲症であると診断されました。&lt;/p&gt;

&lt;p&gt;鼻中隔湾曲症とは、左右の鼻の間にある骨の部分が曲がってしまって鼻が通りにくくなる症状です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medical.jiji.com/medical/011-0265-01&quot;&gt;鼻中隔湾曲症&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この症状を治すには手術する必要があるらしく、紹介された総合病院で近日手術することになりました。
全身麻酔で手術するらしいですが、鼻詰まりが治るということなので、決断して手術してきます。&lt;/p&gt;

&lt;p&gt;術後の経過についてはまた書いていきたいと思います。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2019/01/15/deflected-septum.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2019/01/15/deflected-septum.html</guid>
        
        <category>鼻中隔湾曲</category>
        
        
        <category>family</category>
        
      </item>
    
      <item>
        <title>2019年にネイティブアプリを開発する方法</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://medium.com/@masamichiueta/how-to-build-a-native-app-in-2019-b7f490a17846&quot;&gt;Mediumに書いた記事&lt;/a&gt;の日本語版となります。&lt;/p&gt;

&lt;p&gt;AppleがAppStoreを開始してから10年が経ちました。たくさんの人々がアプリを使っていますし、2019年もこのアプリプラットフォーム上で多くのイノヴェイションが生まれると思います。&lt;/p&gt;

&lt;p&gt;これまで様々なプラットフォームで色々なフレームワークを使ってアプリを開発してきました。今はSwiftでiOSアプリを開発していますが、過去にはWindowsアプリを開発していたり、ReactやVueといったフレームワークでWebアプリを開発したり、ReactNativeやFlutterでマルチプラットフォーム向けのネイティブアプリを開発したりしました。過去数年の間に、色々なツールが出てきては消えていきましたが、2019年にアプリを開発するとしたら以下の3つかなと思っています。&lt;/p&gt;

&lt;h2 id=&quot;1-ネイティブ言語ネイティブプラットフォーム&quot;&gt;1. ネイティブ言語、ネイティブプラットフォーム&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/swift.jpeg&quot; alt=&quot;Swift&quot; title=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOSだと、Swift(かObjective-C)、Xcode、UIKitです。&lt;/p&gt;

&lt;p&gt;Androidだと、Kotlin(かJava)、AndroidStudio(か他のIDE)、Android SDKです。&lt;/p&gt;

&lt;p&gt;2019年でもネイティブアプリを開発するにはこれが一番シンプルな手段だと思います。&lt;/p&gt;

&lt;p&gt;ツールやSDKや開発言語は公式でサポートされていて、それぞれ統合されていますし、最新のAPIを使ったりするのももちろん簡単にできます。フレームワークのバージョンを管理する手間や、よくわからないエラーに悩まされることもありません。それにデバイスに最適化されたUXを開発することにフォーカスすることができます。&lt;/p&gt;

&lt;p&gt;ただ、ずっと言われているように、iOS,Androidの両方のプラットフォームそれぞれにアプリを開発する必要があります。&lt;/p&gt;

&lt;h2 id=&quot;2-react-native&quot;&gt;2. React Native&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/react.png&quot; alt=&quot;React&quot; title=&quot;React&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React NativeはiOS, Androidのマルチプラットフォームに対してネイティブアプリを開発できるFacebook製のフレームワークです。&lt;/p&gt;

&lt;p&gt;React NativeはReactと同じコーディングスタイルなので、JavaScriptやReactをよく知っているWeb開発者のかたは取り組みやすいと思います。Reactを知らない場合は、まずReactを学ぶ必要があります。&lt;/p&gt;

&lt;p&gt;Reactで有名なアーキテクチャはReduxのようなFluxアーキテクチャで、スケーラブルなアーキテクチャでアプリを開発していきたい場合には、アーキテクチャやライブラリについても学ぶ必要があります。その分時間はかかります。&lt;/p&gt;

&lt;h2 id=&quot;3-flutter&quot;&gt;3. Flutter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-01-05/flutter.png&quot; alt=&quot;Flutter&quot; title=&quot;Flutter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FlutterはiOS, Androidのマルチプラットフォームに対してネイティブアプリを開発できるGoogle製のフレームワークです。ネイティブアプリだけでなくWebアプリも開発できるようです。&lt;/p&gt;

&lt;p&gt;Flutterは2018年に多くの開発者に注目されたと思います。私も去年Flutterでアプリを開発しました。&lt;/p&gt;

&lt;p&gt;FlutterのコーディングスタイルはReactに似ていて、コンポーネントベースのUI（Flutterではウィジェットと言います）、ホットリロード、マルチプラットフォームなどが特徴です。&lt;/p&gt;

&lt;p&gt;が、Flutterのもっとも特徴的な点はDartを開発言語として採用している点だと思います。（Go言語ではなく&lt;/p&gt;

&lt;p&gt;Flutterでアプリを開発するまではDartは書いたことがありませんでしたが、C#、Java、JavaScriptなどの経験があればDartを書くのは難しいことではないと思います。&lt;/p&gt;

&lt;p&gt;Flutterはマテリアルデザインのスキャフフォールディング（テンプレート機能のようなもの）があるので、マテリアルデザインのアプリを作りやすくなっています。2019年新しいアプリを開発するならFlutterは考慮する価値があると思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、2019年にネイティブアプリを開発するオススメの方法を3つ紹介してみました。&lt;/p&gt;

&lt;p&gt;私としては長期的な視点で開発する場合には、やはり &lt;strong&gt;1. ネイティブ言語、ネイティブプラットフォーム&lt;/strong&gt;がいいかなと思います。React NativeやFlutterはプロトタイピングに向いていると思っています。というのも、すぐに綺麗なアプリを作ることはできますが、スケーラブルなアーキテクチャ設計にするのはなかなか難しいのではと思うのと、最新のAPIに追従していくのが難しいと思うからです。&lt;/p&gt;

&lt;p&gt;ただ、開発者として開発していて楽しいものを選ぶことが大事だと思います。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/development/2019/01/05/build-a-native-app-in-2019.html</link>
        <guid isPermaLink="true">https://masamichi.me/development/2019/01/05/build-a-native-app-in-2019.html</guid>
        
        <category>アプリ開発</category>
        
        <category>Swift</category>
        
        <category>React Native</category>
        
        <category>Flutter</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>CryptoZombiesというサービスでイーサリアムを使ったdApps開発を勉強し始めました</title>
        <description>&lt;p&gt;そろそろdApps開発についても勉強しないといけないなと思いながらなかなかできていなかったのですが、年末で時間が取れたので &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; というサービスでイーサリアムを使ったdApps開発について勉強しています。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; はdApps開発が学べるWebサービスで、CryptoZombiesというdAppsを題材にしながら実際にコードを書いてdApps開発を学ぶことができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cryptozombies.io&quot;&gt;https://cryptozombies.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現在は3つのコースが用意されており、その中でも &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; というイーサリアム上でスマートコントラクトを実装できるプログラミング言語のコースを実施してみました。&lt;/p&gt;

&lt;p&gt;現在はレッスン6まで公開されていて、スマートコントラクトの開発部分と、実際にそれをフロントからJavaScriptで呼び出す部分を学ぶことができます。&lt;/p&gt;

&lt;h2 id=&quot;学べたこと&quot;&gt;学べたこと&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;プログラミング言語 &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; の基本&lt;/li&gt;
  &lt;li&gt;dApps開発の流れ&lt;/li&gt;
  &lt;li&gt;フロントとの連携方法&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-プログラミング言語-solidity-の基本&quot;&gt;1. プログラミング言語 Solidity の基本&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; の基本的な部分から説明してくれているので、言語自体を学習しながら進めていくことができました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; 自体は難しくないと思いました、少なくとも他の言語の経験があればすぐに理解できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; のページの記述にもあるように、静的型付け言語で、コントラクト指向プログラミング言語です。他の言語と違うのはこのコントラクトという部分だと思います。いわゆる他の言語での&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;にあたるものが&lt;code class=&quot;highlighter-rouge&quot;&gt;contract&lt;/code&gt;になっています。&lt;/p&gt;

&lt;p&gt;あとは、&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;などなどお馴染みの機能もあれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;modifier&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;構文など割と独特なものも紹介されています。&lt;/p&gt;

&lt;h3 id=&quot;2-dapps開発の流れ&quot;&gt;2. dApps開発の流れ&lt;/h3&gt;

&lt;p&gt;dApps開発と言っても最初は何を指すのかあまりわかっていませんでしたが、イーサリアムを用いたdApps開発ではこの &lt;code class=&quot;highlighter-rouge&quot;&gt;Solidity&lt;/code&gt; で書かれた各種コントラクトをコンパイルして、イーサリアム上にデプロイすることでそのコントラクトを利用できるようになります。そしてそれをWebアプリやスマホアプリなどクライアントから呼び出すことでアプリを開発していきます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptZombies&lt;/code&gt; では2018年12月31日時点では、コントラクトをコンパイルしてイーサリアムにデプロイする部分のチュートリアルはありませんが、もうすぐ追加されるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://infura.io&quot;&gt;INFURA&lt;/a&gt; というサービスが紹介されていて、このサービスを使うとイーサリアムのノードを立てることなくコントラクトをデプロイできるようです。&lt;/p&gt;

&lt;h3 id=&quot;3-フロントとの連携方法&quot;&gt;3. フロントとの連携方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; から実装したコントラクトを呼び出す方法が説明されています。web3.jsというイーサリアムのJavaScriptライブラリを使用することで、実装したコントラクトを簡単に呼び出すことができます。&lt;/p&gt;

&lt;p&gt;このAPIを使って普通にWebアプリを作ると、dAppsとしてWebアプリを開発できるというわけですね。&lt;/p&gt;

&lt;p&gt;CryptoZombiesをやっていて面白かったのが、ゾンビに食べさせる餌として、同じくイーサリアムのコントラクト上で開発されているCryptoKittiesのネコを与えることができるとうい点でした。&lt;/p&gt;

&lt;p&gt;つまり同じブロックチェーン上にあるデータなので、公開されているAPIを使えば違うゲーム同士でもデータをやりとりできるということですね。&lt;/p&gt;

&lt;p&gt;まだまだ理解が浅いのでこれからも研究していこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoZombies&lt;/code&gt;をひたすら進めていく動画をアップしたのでよければみてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLCwKASeEZrUvXfSoOTE5eud4F7oBYX0H7&quot;&gt;CryptoZombies at Youtube&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/cryptocurrency/2018/12/31/start-etherium-with-crypto-zombies.html</link>
        <guid isPermaLink="true">https://masamichi.me/cryptocurrency/2018/12/31/start-etherium-with-crypto-zombies.html</guid>
        
        <category>イーサリアム</category>
        
        <category>CryptoZombies</category>
        
        <category>Etherium</category>
        
        <category>dApps</category>
        
        <category>SmartContract</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>はまりんフェスタ2018にいってきました</title>
        <description>&lt;p&gt;はまりんフェスタ2018にいってきました。
今年は、横浜市交通局川和車両基地で開催されました。&lt;/p&gt;

&lt;p&gt;横浜から、ブルーラインとグリーンラインに乗って、川和町駅で下車し会場に向かいました。&lt;/p&gt;

&lt;p&gt;会場では、グリーンラインの車両が展示してあったり特別車両の乗車券も売っていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa1.jpeg&quot; alt=&quot;展示&quot; title=&quot;展示&quot; /&gt;
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa2.jpeg&quot; alt=&quot;展示&quot; title=&quot;展示&quot; /&gt;
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa3.jpeg&quot; alt=&quot;チケット&quot; title=&quot;チケット&quot; /&gt;&lt;/p&gt;

&lt;p&gt;特別車両に乗りましたが、乗ったまま電車の洗車機に入れるという貴重な体験ができました。&lt;/p&gt;

&lt;p&gt;室内の展示では、Nゲージの操作体験やミニブルーライン・グリーンラインの乗車体験がありました。
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa4.jpeg&quot; alt=&quot;Nゲージ&quot; title=&quot;NNゲージ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後は、午前中に並んで整理券をゲットした運転体験でした。本物の電車の運転席に座って、運転を体験することができるので、息子も喜んでいました。
&lt;img src=&quot;/assets/posts/2018-11-11/hamarin_festa5.jpeg&quot; alt=&quot;運転体験&quot; title=&quot;運転体験&quot; /&gt;&lt;/p&gt;

&lt;p&gt;展示のクオリティが高くて非常に楽しめるイベントでした。
来年も参加したいと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Nov 2018 00:00:00 +0900</pubDate>
        <link>https://masamichi.me/family/2018/11/11/hamarin-festa-2018.html</link>
        <guid isPermaLink="true">https://masamichi.me/family/2018/11/11/hamarin-festa-2018.html</guid>
        
        <category>はまりん</category>
        
        <category>はまりんフェスタ</category>
        
        
        <category>family</category>
        
      </item>
    
  </channel>
</rss>
